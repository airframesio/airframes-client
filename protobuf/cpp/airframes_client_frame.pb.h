// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: airframes_client_frame.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_airframes_5fclient_5fframe_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_airframes_5fclient_5fframe_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3013000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3013000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_airframes_5fclient_5fframe_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_airframes_5fclient_5fframe_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[10]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_airframes_5fclient_5fframe_2eproto;
namespace airframes {
class AcarsdecMessage;
class AcarsdecMessageDefaultTypeInternal;
extern AcarsdecMessageDefaultTypeInternal _AcarsdecMessage_default_instance_;
class AirframesClientFrame;
class AirframesClientFrameDefaultTypeInternal;
extern AirframesClientFrameDefaultTypeInternal _AirframesClientFrame_default_instance_;
class AirframesClientFrame_AirframesConfig;
class AirframesClientFrame_AirframesConfigDefaultTypeInternal;
extern AirframesClientFrame_AirframesConfigDefaultTypeInternal _AirframesClientFrame_AirframesConfig_default_instance_;
class AirframesClientFrame_AirframesConfig_Feed;
class AirframesClientFrame_AirframesConfig_FeedDefaultTypeInternal;
extern AirframesClientFrame_AirframesConfig_FeedDefaultTypeInternal _AirframesClientFrame_AirframesConfig_Feed_default_instance_;
class AirframesClientFrame_Source;
class AirframesClientFrame_SourceDefaultTypeInternal;
extern AirframesClientFrame_SourceDefaultTypeInternal _AirframesClientFrame_Source_default_instance_;
class AirframesClientFrame_Source_App;
class AirframesClientFrame_Source_AppDefaultTypeInternal;
extern AirframesClientFrame_Source_AppDefaultTypeInternal _AirframesClientFrame_Source_App_default_instance_;
class AirframesClientFrame_Source_Host;
class AirframesClientFrame_Source_HostDefaultTypeInternal;
extern AirframesClientFrame_Source_HostDefaultTypeInternal _AirframesClientFrame_Source_Host_default_instance_;
class FrameRequest;
class FrameRequestDefaultTypeInternal;
extern FrameRequestDefaultTypeInternal _FrameRequest_default_instance_;
class TestRequest;
class TestRequestDefaultTypeInternal;
extern TestRequestDefaultTypeInternal _TestRequest_default_instance_;
class Vdlm2decMessage;
class Vdlm2decMessageDefaultTypeInternal;
extern Vdlm2decMessageDefaultTypeInternal _Vdlm2decMessage_default_instance_;
}  // namespace airframes
PROTOBUF_NAMESPACE_OPEN
template<> ::airframes::AcarsdecMessage* Arena::CreateMaybeMessage<::airframes::AcarsdecMessage>(Arena*);
template<> ::airframes::AirframesClientFrame* Arena::CreateMaybeMessage<::airframes::AirframesClientFrame>(Arena*);
template<> ::airframes::AirframesClientFrame_AirframesConfig* Arena::CreateMaybeMessage<::airframes::AirframesClientFrame_AirframesConfig>(Arena*);
template<> ::airframes::AirframesClientFrame_AirframesConfig_Feed* Arena::CreateMaybeMessage<::airframes::AirframesClientFrame_AirframesConfig_Feed>(Arena*);
template<> ::airframes::AirframesClientFrame_Source* Arena::CreateMaybeMessage<::airframes::AirframesClientFrame_Source>(Arena*);
template<> ::airframes::AirframesClientFrame_Source_App* Arena::CreateMaybeMessage<::airframes::AirframesClientFrame_Source_App>(Arena*);
template<> ::airframes::AirframesClientFrame_Source_Host* Arena::CreateMaybeMessage<::airframes::AirframesClientFrame_Source_Host>(Arena*);
template<> ::airframes::FrameRequest* Arena::CreateMaybeMessage<::airframes::FrameRequest>(Arena*);
template<> ::airframes::TestRequest* Arena::CreateMaybeMessage<::airframes::TestRequest>(Arena*);
template<> ::airframes::Vdlm2decMessage* Arena::CreateMaybeMessage<::airframes::Vdlm2decMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace airframes {

enum AirframesClientFrame_Source_App_AppType : int {
  AirframesClientFrame_Source_App_AppType_UNKNOWN_APP_TYPE = 0,
  AirframesClientFrame_Source_App_AppType_ACARSDEC = 1,
  AirframesClientFrame_Source_App_AppType_ACARSDECO2 = 2,
  AirframesClientFrame_Source_App_AppType_VDLM2DEC = 3,
  AirframesClientFrame_Source_App_AppType_DUMPVDL2 = 4,
  AirframesClientFrame_Source_App_AppType_JAERO = 5,
  AirframesClientFrame_Source_App_AppType_PC_HFDL = 6,
  AirframesClientFrame_Source_App_AppType_SORCERER = 7,
  AirframesClientFrame_Source_App_AppType_AirframesClientFrame_Source_App_AppType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AirframesClientFrame_Source_App_AppType_AirframesClientFrame_Source_App_AppType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AirframesClientFrame_Source_App_AppType_IsValid(int value);
constexpr AirframesClientFrame_Source_App_AppType AirframesClientFrame_Source_App_AppType_AppType_MIN = AirframesClientFrame_Source_App_AppType_UNKNOWN_APP_TYPE;
constexpr AirframesClientFrame_Source_App_AppType AirframesClientFrame_Source_App_AppType_AppType_MAX = AirframesClientFrame_Source_App_AppType_SORCERER;
constexpr int AirframesClientFrame_Source_App_AppType_AppType_ARRAYSIZE = AirframesClientFrame_Source_App_AppType_AppType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AirframesClientFrame_Source_App_AppType_descriptor();
template<typename T>
inline const std::string& AirframesClientFrame_Source_App_AppType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AirframesClientFrame_Source_App_AppType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AirframesClientFrame_Source_App_AppType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AirframesClientFrame_Source_App_AppType_descriptor(), enum_t_value);
}
inline bool AirframesClientFrame_Source_App_AppType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AirframesClientFrame_Source_App_AppType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AirframesClientFrame_Source_App_AppType>(
    AirframesClientFrame_Source_App_AppType_descriptor(), name, value);
}
enum AirframesClientFrame_Source_Host_Platform : int {
  AirframesClientFrame_Source_Host_Platform_UNKNOWN_PLATFORM = 0,
  AirframesClientFrame_Source_Host_Platform_X86_32 = 1,
  AirframesClientFrame_Source_Host_Platform_X86_64 = 2,
  AirframesClientFrame_Source_Host_Platform_ARM_V6 = 3,
  AirframesClientFrame_Source_Host_Platform_ARM_V7 = 4,
  AirframesClientFrame_Source_Host_Platform_ARM_64 = 5,
  AirframesClientFrame_Source_Host_Platform_AirframesClientFrame_Source_Host_Platform_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AirframesClientFrame_Source_Host_Platform_AirframesClientFrame_Source_Host_Platform_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AirframesClientFrame_Source_Host_Platform_IsValid(int value);
constexpr AirframesClientFrame_Source_Host_Platform AirframesClientFrame_Source_Host_Platform_Platform_MIN = AirframesClientFrame_Source_Host_Platform_UNKNOWN_PLATFORM;
constexpr AirframesClientFrame_Source_Host_Platform AirframesClientFrame_Source_Host_Platform_Platform_MAX = AirframesClientFrame_Source_Host_Platform_ARM_64;
constexpr int AirframesClientFrame_Source_Host_Platform_Platform_ARRAYSIZE = AirframesClientFrame_Source_Host_Platform_Platform_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AirframesClientFrame_Source_Host_Platform_descriptor();
template<typename T>
inline const std::string& AirframesClientFrame_Source_Host_Platform_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AirframesClientFrame_Source_Host_Platform>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AirframesClientFrame_Source_Host_Platform_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AirframesClientFrame_Source_Host_Platform_descriptor(), enum_t_value);
}
inline bool AirframesClientFrame_Source_Host_Platform_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AirframesClientFrame_Source_Host_Platform* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AirframesClientFrame_Source_Host_Platform>(
    AirframesClientFrame_Source_Host_Platform_descriptor(), name, value);
}
enum AirframesClientFrame_Source_Host_OperatingSystem : int {
  AirframesClientFrame_Source_Host_OperatingSystem_UNKNOWN_OPERATING_SYSTEM = 0,
  AirframesClientFrame_Source_Host_OperatingSystem_LINUX = 1,
  AirframesClientFrame_Source_Host_OperatingSystem_MACOS = 2,
  AirframesClientFrame_Source_Host_OperatingSystem_WINDOWS = 3,
  AirframesClientFrame_Source_Host_OperatingSystem_AirframesClientFrame_Source_Host_OperatingSystem_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AirframesClientFrame_Source_Host_OperatingSystem_AirframesClientFrame_Source_Host_OperatingSystem_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AirframesClientFrame_Source_Host_OperatingSystem_IsValid(int value);
constexpr AirframesClientFrame_Source_Host_OperatingSystem AirframesClientFrame_Source_Host_OperatingSystem_OperatingSystem_MIN = AirframesClientFrame_Source_Host_OperatingSystem_UNKNOWN_OPERATING_SYSTEM;
constexpr AirframesClientFrame_Source_Host_OperatingSystem AirframesClientFrame_Source_Host_OperatingSystem_OperatingSystem_MAX = AirframesClientFrame_Source_Host_OperatingSystem_WINDOWS;
constexpr int AirframesClientFrame_Source_Host_OperatingSystem_OperatingSystem_ARRAYSIZE = AirframesClientFrame_Source_Host_OperatingSystem_OperatingSystem_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AirframesClientFrame_Source_Host_OperatingSystem_descriptor();
template<typename T>
inline const std::string& AirframesClientFrame_Source_Host_OperatingSystem_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AirframesClientFrame_Source_Host_OperatingSystem>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AirframesClientFrame_Source_Host_OperatingSystem_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AirframesClientFrame_Source_Host_OperatingSystem_descriptor(), enum_t_value);
}
inline bool AirframesClientFrame_Source_Host_OperatingSystem_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AirframesClientFrame_Source_Host_OperatingSystem* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AirframesClientFrame_Source_Host_OperatingSystem>(
    AirframesClientFrame_Source_Host_OperatingSystem_descriptor(), name, value);
}
enum AirframesClientFrame_Source_SourceType : int {
  AirframesClientFrame_Source_SourceType_ACARS = 0,
  AirframesClientFrame_Source_SourceType_VDL = 1,
  AirframesClientFrame_Source_SourceType_HFDL = 2,
  AirframesClientFrame_Source_SourceType_AERO = 3,
  AirframesClientFrame_Source_SourceType_AirframesClientFrame_Source_SourceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AirframesClientFrame_Source_SourceType_AirframesClientFrame_Source_SourceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AirframesClientFrame_Source_SourceType_IsValid(int value);
constexpr AirframesClientFrame_Source_SourceType AirframesClientFrame_Source_SourceType_SourceType_MIN = AirframesClientFrame_Source_SourceType_ACARS;
constexpr AirframesClientFrame_Source_SourceType AirframesClientFrame_Source_SourceType_SourceType_MAX = AirframesClientFrame_Source_SourceType_AERO;
constexpr int AirframesClientFrame_Source_SourceType_SourceType_ARRAYSIZE = AirframesClientFrame_Source_SourceType_SourceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AirframesClientFrame_Source_SourceType_descriptor();
template<typename T>
inline const std::string& AirframesClientFrame_Source_SourceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AirframesClientFrame_Source_SourceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AirframesClientFrame_Source_SourceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AirframesClientFrame_Source_SourceType_descriptor(), enum_t_value);
}
inline bool AirframesClientFrame_Source_SourceType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AirframesClientFrame_Source_SourceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AirframesClientFrame_Source_SourceType>(
    AirframesClientFrame_Source_SourceType_descriptor(), name, value);
}
enum AirframesClientFrame_Source_SourceFormat : int {
  AirframesClientFrame_Source_SourceFormat_HUMAN_READABLE_TEXT = 0,
  AirframesClientFrame_Source_SourceFormat_BEAST = 1,
  AirframesClientFrame_Source_SourceFormat_SBS3 = 2,
  AirframesClientFrame_Source_SourceFormat_PLANE_PLOTTER = 3,
  AirframesClientFrame_Source_SourceFormat_JSON_GENERIC = 4,
  AirframesClientFrame_Source_SourceFormat_JSON_ACARSDEC = 5,
  AirframesClientFrame_Source_SourceFormat_JSON_VDLM2DEC = 6,
  AirframesClientFrame_Source_SourceFormat_AirframesClientFrame_Source_SourceFormat_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  AirframesClientFrame_Source_SourceFormat_AirframesClientFrame_Source_SourceFormat_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool AirframesClientFrame_Source_SourceFormat_IsValid(int value);
constexpr AirframesClientFrame_Source_SourceFormat AirframesClientFrame_Source_SourceFormat_SourceFormat_MIN = AirframesClientFrame_Source_SourceFormat_HUMAN_READABLE_TEXT;
constexpr AirframesClientFrame_Source_SourceFormat AirframesClientFrame_Source_SourceFormat_SourceFormat_MAX = AirframesClientFrame_Source_SourceFormat_JSON_VDLM2DEC;
constexpr int AirframesClientFrame_Source_SourceFormat_SourceFormat_ARRAYSIZE = AirframesClientFrame_Source_SourceFormat_SourceFormat_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* AirframesClientFrame_Source_SourceFormat_descriptor();
template<typename T>
inline const std::string& AirframesClientFrame_Source_SourceFormat_Name(T enum_t_value) {
  static_assert(::std::is_same<T, AirframesClientFrame_Source_SourceFormat>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function AirframesClientFrame_Source_SourceFormat_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    AirframesClientFrame_Source_SourceFormat_descriptor(), enum_t_value);
}
inline bool AirframesClientFrame_Source_SourceFormat_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, AirframesClientFrame_Source_SourceFormat* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<AirframesClientFrame_Source_SourceFormat>(
    AirframesClientFrame_Source_SourceFormat_descriptor(), name, value);
}
// ===================================================================

class AcarsdecMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airframes.AcarsdecMessage) */ {
 public:
  inline AcarsdecMessage() : AcarsdecMessage(nullptr) {}
  virtual ~AcarsdecMessage();

  AcarsdecMessage(const AcarsdecMessage& from);
  AcarsdecMessage(AcarsdecMessage&& from) noexcept
    : AcarsdecMessage() {
    *this = ::std::move(from);
  }

  inline AcarsdecMessage& operator=(const AcarsdecMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline AcarsdecMessage& operator=(AcarsdecMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AcarsdecMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AcarsdecMessage* internal_default_instance() {
    return reinterpret_cast<const AcarsdecMessage*>(
               &_AcarsdecMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(AcarsdecMessage& a, AcarsdecMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(AcarsdecMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AcarsdecMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AcarsdecMessage* New() const final {
    return CreateMaybeMessage<AcarsdecMessage>(nullptr);
  }

  AcarsdecMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AcarsdecMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AcarsdecMessage& from);
  void MergeFrom(const AcarsdecMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AcarsdecMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airframes.AcarsdecMessage";
  }
  protected:
  explicit AcarsdecMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_airframes_5fclient_5fframe_2eproto);
    return ::descriptor_table_airframes_5fclient_5fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationIdFieldNumber = 2,
    kModeFieldNumber = 7,
    kLabelFieldNumber = 8,
    kBlockIdFieldNumber = 9,
    kAckFieldNumber = 10,
    kTailFieldNumber = 11,
    kFlightFieldNumber = 12,
    kMessageNumberFieldNumber = 13,
    kTextFieldNumber = 14,
    kTimestampFieldNumber = 1,
    kFrequencyFieldNumber = 4,
    kChannelFieldNumber = 3,
    kLevelFieldNumber = 5,
    kErrorFieldNumber = 6,
    kEndFieldNumber = 15,
  };
  // string station_id = 2;
  void clear_station_id();
  const std::string& station_id() const;
  void set_station_id(const std::string& value);
  void set_station_id(std::string&& value);
  void set_station_id(const char* value);
  void set_station_id(const char* value, size_t size);
  std::string* mutable_station_id();
  std::string* release_station_id();
  void set_allocated_station_id(std::string* station_id);
  private:
  const std::string& _internal_station_id() const;
  void _internal_set_station_id(const std::string& value);
  std::string* _internal_mutable_station_id();
  public:

  // string mode = 7;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // string label = 8;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string block_id = 9;
  void clear_block_id();
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const char* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);
  private:
  const std::string& _internal_block_id() const;
  void _internal_set_block_id(const std::string& value);
  std::string* _internal_mutable_block_id();
  public:

  // string ack = 10;
  void clear_ack();
  const std::string& ack() const;
  void set_ack(const std::string& value);
  void set_ack(std::string&& value);
  void set_ack(const char* value);
  void set_ack(const char* value, size_t size);
  std::string* mutable_ack();
  std::string* release_ack();
  void set_allocated_ack(std::string* ack);
  private:
  const std::string& _internal_ack() const;
  void _internal_set_ack(const std::string& value);
  std::string* _internal_mutable_ack();
  public:

  // string tail = 11;
  void clear_tail();
  const std::string& tail() const;
  void set_tail(const std::string& value);
  void set_tail(std::string&& value);
  void set_tail(const char* value);
  void set_tail(const char* value, size_t size);
  std::string* mutable_tail();
  std::string* release_tail();
  void set_allocated_tail(std::string* tail);
  private:
  const std::string& _internal_tail() const;
  void _internal_set_tail(const std::string& value);
  std::string* _internal_mutable_tail();
  public:

  // string flight = 12;
  void clear_flight();
  const std::string& flight() const;
  void set_flight(const std::string& value);
  void set_flight(std::string&& value);
  void set_flight(const char* value);
  void set_flight(const char* value, size_t size);
  std::string* mutable_flight();
  std::string* release_flight();
  void set_allocated_flight(std::string* flight);
  private:
  const std::string& _internal_flight() const;
  void _internal_set_flight(const std::string& value);
  std::string* _internal_mutable_flight();
  public:

  // string message_number = 13;
  void clear_message_number();
  const std::string& message_number() const;
  void set_message_number(const std::string& value);
  void set_message_number(std::string&& value);
  void set_message_number(const char* value);
  void set_message_number(const char* value, size_t size);
  std::string* mutable_message_number();
  std::string* release_message_number();
  void set_allocated_message_number(std::string* message_number);
  private:
  const std::string& _internal_message_number() const;
  void _internal_set_message_number(const std::string& value);
  std::string* _internal_mutable_message_number();
  public:

  // string text = 14;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // double timestamp = 1;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // double frequency = 4;
  void clear_frequency();
  double frequency() const;
  void set_frequency(double value);
  private:
  double _internal_frequency() const;
  void _internal_set_frequency(double value);
  public:

  // uint32 channel = 3;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 level = 5;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 error = 6;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::uint32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool end = 15;
  void clear_end();
  bool end() const;
  void set_end(bool value);
  private:
  bool _internal_end() const;
  void _internal_set_end(bool value);
  public:

  // @@protoc_insertion_point(class_scope:airframes.AcarsdecMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr station_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ack_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flight_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  double timestamp_;
  double frequency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_;
  bool end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_airframes_5fclient_5fframe_2eproto;
};
// -------------------------------------------------------------------

class Vdlm2decMessage PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airframes.Vdlm2decMessage) */ {
 public:
  inline Vdlm2decMessage() : Vdlm2decMessage(nullptr) {}
  virtual ~Vdlm2decMessage();

  Vdlm2decMessage(const Vdlm2decMessage& from);
  Vdlm2decMessage(Vdlm2decMessage&& from) noexcept
    : Vdlm2decMessage() {
    *this = ::std::move(from);
  }

  inline Vdlm2decMessage& operator=(const Vdlm2decMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vdlm2decMessage& operator=(Vdlm2decMessage&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vdlm2decMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vdlm2decMessage* internal_default_instance() {
    return reinterpret_cast<const Vdlm2decMessage*>(
               &_Vdlm2decMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vdlm2decMessage& a, Vdlm2decMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(Vdlm2decMessage* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vdlm2decMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vdlm2decMessage* New() const final {
    return CreateMaybeMessage<Vdlm2decMessage>(nullptr);
  }

  Vdlm2decMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vdlm2decMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vdlm2decMessage& from);
  void MergeFrom(const Vdlm2decMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vdlm2decMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airframes.Vdlm2decMessage";
  }
  protected:
  explicit Vdlm2decMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_airframes_5fclient_5fframe_2eproto);
    return ::descriptor_table_airframes_5fclient_5fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStationIdFieldNumber = 2,
    kModeFieldNumber = 9,
    kLabelFieldNumber = 10,
    kBlockIdFieldNumber = 11,
    kAckFieldNumber = 12,
    kTailFieldNumber = 13,
    kFlightFieldNumber = 14,
    kMessageNumberFieldNumber = 15,
    kTextFieldNumber = 16,
    kDepartureAirportFieldNumber = 18,
    kDestinationAirportFieldNumber = 19,
    kArrivalEtaFieldNumber = 20,
    kGateOutFieldNumber = 21,
    kGroundOffFieldNumber = 22,
    kGroundOnFieldNumber = 23,
    kGateInFieldNumber = 24,
    kTimestampFieldNumber = 1,
    kFrequencyFieldNumber = 4,
    kChannelFieldNumber = 3,
    kFromIcaoFieldNumber = 5,
    kToIcaoFieldNumber = 6,
    kLevelFieldNumber = 7,
    kErrorFieldNumber = 8,
    kEndFieldNumber = 17,
  };
  // string station_id = 2;
  void clear_station_id();
  const std::string& station_id() const;
  void set_station_id(const std::string& value);
  void set_station_id(std::string&& value);
  void set_station_id(const char* value);
  void set_station_id(const char* value, size_t size);
  std::string* mutable_station_id();
  std::string* release_station_id();
  void set_allocated_station_id(std::string* station_id);
  private:
  const std::string& _internal_station_id() const;
  void _internal_set_station_id(const std::string& value);
  std::string* _internal_mutable_station_id();
  public:

  // string mode = 9;
  void clear_mode();
  const std::string& mode() const;
  void set_mode(const std::string& value);
  void set_mode(std::string&& value);
  void set_mode(const char* value);
  void set_mode(const char* value, size_t size);
  std::string* mutable_mode();
  std::string* release_mode();
  void set_allocated_mode(std::string* mode);
  private:
  const std::string& _internal_mode() const;
  void _internal_set_mode(const std::string& value);
  std::string* _internal_mutable_mode();
  public:

  // string label = 10;
  void clear_label();
  const std::string& label() const;
  void set_label(const std::string& value);
  void set_label(std::string&& value);
  void set_label(const char* value);
  void set_label(const char* value, size_t size);
  std::string* mutable_label();
  std::string* release_label();
  void set_allocated_label(std::string* label);
  private:
  const std::string& _internal_label() const;
  void _internal_set_label(const std::string& value);
  std::string* _internal_mutable_label();
  public:

  // string block_id = 11;
  void clear_block_id();
  const std::string& block_id() const;
  void set_block_id(const std::string& value);
  void set_block_id(std::string&& value);
  void set_block_id(const char* value);
  void set_block_id(const char* value, size_t size);
  std::string* mutable_block_id();
  std::string* release_block_id();
  void set_allocated_block_id(std::string* block_id);
  private:
  const std::string& _internal_block_id() const;
  void _internal_set_block_id(const std::string& value);
  std::string* _internal_mutable_block_id();
  public:

  // string ack = 12;
  void clear_ack();
  const std::string& ack() const;
  void set_ack(const std::string& value);
  void set_ack(std::string&& value);
  void set_ack(const char* value);
  void set_ack(const char* value, size_t size);
  std::string* mutable_ack();
  std::string* release_ack();
  void set_allocated_ack(std::string* ack);
  private:
  const std::string& _internal_ack() const;
  void _internal_set_ack(const std::string& value);
  std::string* _internal_mutable_ack();
  public:

  // string tail = 13;
  void clear_tail();
  const std::string& tail() const;
  void set_tail(const std::string& value);
  void set_tail(std::string&& value);
  void set_tail(const char* value);
  void set_tail(const char* value, size_t size);
  std::string* mutable_tail();
  std::string* release_tail();
  void set_allocated_tail(std::string* tail);
  private:
  const std::string& _internal_tail() const;
  void _internal_set_tail(const std::string& value);
  std::string* _internal_mutable_tail();
  public:

  // string flight = 14;
  void clear_flight();
  const std::string& flight() const;
  void set_flight(const std::string& value);
  void set_flight(std::string&& value);
  void set_flight(const char* value);
  void set_flight(const char* value, size_t size);
  std::string* mutable_flight();
  std::string* release_flight();
  void set_allocated_flight(std::string* flight);
  private:
  const std::string& _internal_flight() const;
  void _internal_set_flight(const std::string& value);
  std::string* _internal_mutable_flight();
  public:

  // string message_number = 15;
  void clear_message_number();
  const std::string& message_number() const;
  void set_message_number(const std::string& value);
  void set_message_number(std::string&& value);
  void set_message_number(const char* value);
  void set_message_number(const char* value, size_t size);
  std::string* mutable_message_number();
  std::string* release_message_number();
  void set_allocated_message_number(std::string* message_number);
  private:
  const std::string& _internal_message_number() const;
  void _internal_set_message_number(const std::string& value);
  std::string* _internal_mutable_message_number();
  public:

  // string text = 16;
  void clear_text();
  const std::string& text() const;
  void set_text(const std::string& value);
  void set_text(std::string&& value);
  void set_text(const char* value);
  void set_text(const char* value, size_t size);
  std::string* mutable_text();
  std::string* release_text();
  void set_allocated_text(std::string* text);
  private:
  const std::string& _internal_text() const;
  void _internal_set_text(const std::string& value);
  std::string* _internal_mutable_text();
  public:

  // string departure_airport = 18;
  void clear_departure_airport();
  const std::string& departure_airport() const;
  void set_departure_airport(const std::string& value);
  void set_departure_airport(std::string&& value);
  void set_departure_airport(const char* value);
  void set_departure_airport(const char* value, size_t size);
  std::string* mutable_departure_airport();
  std::string* release_departure_airport();
  void set_allocated_departure_airport(std::string* departure_airport);
  private:
  const std::string& _internal_departure_airport() const;
  void _internal_set_departure_airport(const std::string& value);
  std::string* _internal_mutable_departure_airport();
  public:

  // string destination_airport = 19;
  void clear_destination_airport();
  const std::string& destination_airport() const;
  void set_destination_airport(const std::string& value);
  void set_destination_airport(std::string&& value);
  void set_destination_airport(const char* value);
  void set_destination_airport(const char* value, size_t size);
  std::string* mutable_destination_airport();
  std::string* release_destination_airport();
  void set_allocated_destination_airport(std::string* destination_airport);
  private:
  const std::string& _internal_destination_airport() const;
  void _internal_set_destination_airport(const std::string& value);
  std::string* _internal_mutable_destination_airport();
  public:

  // string arrival_eta = 20;
  void clear_arrival_eta();
  const std::string& arrival_eta() const;
  void set_arrival_eta(const std::string& value);
  void set_arrival_eta(std::string&& value);
  void set_arrival_eta(const char* value);
  void set_arrival_eta(const char* value, size_t size);
  std::string* mutable_arrival_eta();
  std::string* release_arrival_eta();
  void set_allocated_arrival_eta(std::string* arrival_eta);
  private:
  const std::string& _internal_arrival_eta() const;
  void _internal_set_arrival_eta(const std::string& value);
  std::string* _internal_mutable_arrival_eta();
  public:

  // string gate_out = 21;
  void clear_gate_out();
  const std::string& gate_out() const;
  void set_gate_out(const std::string& value);
  void set_gate_out(std::string&& value);
  void set_gate_out(const char* value);
  void set_gate_out(const char* value, size_t size);
  std::string* mutable_gate_out();
  std::string* release_gate_out();
  void set_allocated_gate_out(std::string* gate_out);
  private:
  const std::string& _internal_gate_out() const;
  void _internal_set_gate_out(const std::string& value);
  std::string* _internal_mutable_gate_out();
  public:

  // string ground_off = 22;
  void clear_ground_off();
  const std::string& ground_off() const;
  void set_ground_off(const std::string& value);
  void set_ground_off(std::string&& value);
  void set_ground_off(const char* value);
  void set_ground_off(const char* value, size_t size);
  std::string* mutable_ground_off();
  std::string* release_ground_off();
  void set_allocated_ground_off(std::string* ground_off);
  private:
  const std::string& _internal_ground_off() const;
  void _internal_set_ground_off(const std::string& value);
  std::string* _internal_mutable_ground_off();
  public:

  // string ground_on = 23;
  void clear_ground_on();
  const std::string& ground_on() const;
  void set_ground_on(const std::string& value);
  void set_ground_on(std::string&& value);
  void set_ground_on(const char* value);
  void set_ground_on(const char* value, size_t size);
  std::string* mutable_ground_on();
  std::string* release_ground_on();
  void set_allocated_ground_on(std::string* ground_on);
  private:
  const std::string& _internal_ground_on() const;
  void _internal_set_ground_on(const std::string& value);
  std::string* _internal_mutable_ground_on();
  public:

  // string gate_in = 24;
  void clear_gate_in();
  const std::string& gate_in() const;
  void set_gate_in(const std::string& value);
  void set_gate_in(std::string&& value);
  void set_gate_in(const char* value);
  void set_gate_in(const char* value, size_t size);
  std::string* mutable_gate_in();
  std::string* release_gate_in();
  void set_allocated_gate_in(std::string* gate_in);
  private:
  const std::string& _internal_gate_in() const;
  void _internal_set_gate_in(const std::string& value);
  std::string* _internal_mutable_gate_in();
  public:

  // double timestamp = 1;
  void clear_timestamp();
  double timestamp() const;
  void set_timestamp(double value);
  private:
  double _internal_timestamp() const;
  void _internal_set_timestamp(double value);
  public:

  // double frequency = 4;
  void clear_frequency();
  double frequency() const;
  void set_frequency(double value);
  private:
  double _internal_frequency() const;
  void _internal_set_frequency(double value);
  public:

  // uint32 channel = 3;
  void clear_channel();
  ::PROTOBUF_NAMESPACE_ID::uint32 channel() const;
  void set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_channel() const;
  void _internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 from_icao = 5;
  void clear_from_icao();
  ::PROTOBUF_NAMESPACE_ID::uint32 from_icao() const;
  void set_from_icao(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_from_icao() const;
  void _internal_set_from_icao(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 to_icao = 6;
  void clear_to_icao();
  ::PROTOBUF_NAMESPACE_ID::uint32 to_icao() const;
  void set_to_icao(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_to_icao() const;
  void _internal_set_to_icao(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // sint32 level = 7;
  void clear_level();
  ::PROTOBUF_NAMESPACE_ID::int32 level() const;
  void set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_level() const;
  void _internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // uint32 error = 8;
  void clear_error();
  ::PROTOBUF_NAMESPACE_ID::uint32 error() const;
  void set_error(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_error() const;
  void _internal_set_error(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // bool end = 17;
  void clear_end();
  bool end() const;
  void set_end(bool value);
  private:
  bool _internal_end() const;
  void _internal_set_end(bool value);
  public:

  // @@protoc_insertion_point(class_scope:airframes.Vdlm2decMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr station_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr mode_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr label_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr block_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ack_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tail_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr flight_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_number_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr text_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr departure_airport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr destination_airport_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr arrival_eta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gate_out_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ground_off_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ground_on_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr gate_in_;
  double timestamp_;
  double frequency_;
  ::PROTOBUF_NAMESPACE_ID::uint32 channel_;
  ::PROTOBUF_NAMESPACE_ID::uint32 from_icao_;
  ::PROTOBUF_NAMESPACE_ID::uint32 to_icao_;
  ::PROTOBUF_NAMESPACE_ID::int32 level_;
  ::PROTOBUF_NAMESPACE_ID::uint32 error_;
  bool end_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_airframes_5fclient_5fframe_2eproto;
};
// -------------------------------------------------------------------

class TestRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airframes.TestRequest) */ {
 public:
  inline TestRequest() : TestRequest(nullptr) {}
  virtual ~TestRequest();

  TestRequest(const TestRequest& from);
  TestRequest(TestRequest&& from) noexcept
    : TestRequest() {
    *this = ::std::move(from);
  }

  inline TestRequest& operator=(const TestRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline TestRequest& operator=(TestRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TestRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TestRequest* internal_default_instance() {
    return reinterpret_cast<const TestRequest*>(
               &_TestRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TestRequest& a, TestRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(TestRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TestRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TestRequest* New() const final {
    return CreateMaybeMessage<TestRequest>(nullptr);
  }

  TestRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TestRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TestRequest& from);
  void MergeFrom(const TestRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TestRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airframes.TestRequest";
  }
  protected:
  explicit TestRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_airframes_5fclient_5fframe_2eproto);
    return ::descriptor_table_airframes_5fclient_5fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:airframes.TestRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_airframes_5fclient_5fframe_2eproto;
};
// -------------------------------------------------------------------

class FrameRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airframes.FrameRequest) */ {
 public:
  inline FrameRequest() : FrameRequest(nullptr) {}
  virtual ~FrameRequest();

  FrameRequest(const FrameRequest& from);
  FrameRequest(FrameRequest&& from) noexcept
    : FrameRequest() {
    *this = ::std::move(from);
  }

  inline FrameRequest& operator=(const FrameRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline FrameRequest& operator=(FrameRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FrameRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FrameRequest* internal_default_instance() {
    return reinterpret_cast<const FrameRequest*>(
               &_FrameRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(FrameRequest& a, FrameRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(FrameRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FrameRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FrameRequest* New() const final {
    return CreateMaybeMessage<FrameRequest>(nullptr);
  }

  FrameRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FrameRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FrameRequest& from);
  void MergeFrom(const FrameRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FrameRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airframes.FrameRequest";
  }
  protected:
  explicit FrameRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_airframes_5fclient_5fframe_2eproto);
    return ::descriptor_table_airframes_5fclient_5fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:airframes.FrameRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_airframes_5fclient_5fframe_2eproto;
};
// -------------------------------------------------------------------

class AirframesClientFrame_Source_App PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airframes.AirframesClientFrame.Source.App) */ {
 public:
  inline AirframesClientFrame_Source_App() : AirframesClientFrame_Source_App(nullptr) {}
  virtual ~AirframesClientFrame_Source_App();

  AirframesClientFrame_Source_App(const AirframesClientFrame_Source_App& from);
  AirframesClientFrame_Source_App(AirframesClientFrame_Source_App&& from) noexcept
    : AirframesClientFrame_Source_App() {
    *this = ::std::move(from);
  }

  inline AirframesClientFrame_Source_App& operator=(const AirframesClientFrame_Source_App& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirframesClientFrame_Source_App& operator=(AirframesClientFrame_Source_App&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirframesClientFrame_Source_App& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AirframesClientFrame_Source_App* internal_default_instance() {
    return reinterpret_cast<const AirframesClientFrame_Source_App*>(
               &_AirframesClientFrame_Source_App_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AirframesClientFrame_Source_App& a, AirframesClientFrame_Source_App& b) {
    a.Swap(&b);
  }
  inline void Swap(AirframesClientFrame_Source_App* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirframesClientFrame_Source_App* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirframesClientFrame_Source_App* New() const final {
    return CreateMaybeMessage<AirframesClientFrame_Source_App>(nullptr);
  }

  AirframesClientFrame_Source_App* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirframesClientFrame_Source_App>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirframesClientFrame_Source_App& from);
  void MergeFrom(const AirframesClientFrame_Source_App& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirframesClientFrame_Source_App* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airframes.AirframesClientFrame.Source.App";
  }
  protected:
  explicit AirframesClientFrame_Source_App(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_airframes_5fclient_5fframe_2eproto);
    return ::descriptor_table_airframes_5fclient_5fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AirframesClientFrame_Source_App_AppType AppType;
  static constexpr AppType UNKNOWN_APP_TYPE =
    AirframesClientFrame_Source_App_AppType_UNKNOWN_APP_TYPE;
  static constexpr AppType ACARSDEC =
    AirframesClientFrame_Source_App_AppType_ACARSDEC;
  static constexpr AppType ACARSDECO2 =
    AirframesClientFrame_Source_App_AppType_ACARSDECO2;
  static constexpr AppType VDLM2DEC =
    AirframesClientFrame_Source_App_AppType_VDLM2DEC;
  static constexpr AppType DUMPVDL2 =
    AirframesClientFrame_Source_App_AppType_DUMPVDL2;
  static constexpr AppType JAERO =
    AirframesClientFrame_Source_App_AppType_JAERO;
  static constexpr AppType PC_HFDL =
    AirframesClientFrame_Source_App_AppType_PC_HFDL;
  static constexpr AppType SORCERER =
    AirframesClientFrame_Source_App_AppType_SORCERER;
  static inline bool AppType_IsValid(int value) {
    return AirframesClientFrame_Source_App_AppType_IsValid(value);
  }
  static constexpr AppType AppType_MIN =
    AirframesClientFrame_Source_App_AppType_AppType_MIN;
  static constexpr AppType AppType_MAX =
    AirframesClientFrame_Source_App_AppType_AppType_MAX;
  static constexpr int AppType_ARRAYSIZE =
    AirframesClientFrame_Source_App_AppType_AppType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  AppType_descriptor() {
    return AirframesClientFrame_Source_App_AppType_descriptor();
  }
  template<typename T>
  static inline const std::string& AppType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, AppType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function AppType_Name.");
    return AirframesClientFrame_Source_App_AppType_Name(enum_t_value);
  }
  static inline bool AppType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      AppType* value) {
    return AirframesClientFrame_Source_App_AppType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 2,
    kTypeFieldNumber = 1,
  };
  // string version = 2;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // .airframes.AirframesClientFrame.Source.App.AppType type = 1;
  void clear_type();
  ::airframes::AirframesClientFrame_Source_App_AppType type() const;
  void set_type(::airframes::AirframesClientFrame_Source_App_AppType value);
  private:
  ::airframes::AirframesClientFrame_Source_App_AppType _internal_type() const;
  void _internal_set_type(::airframes::AirframesClientFrame_Source_App_AppType value);
  public:

  // @@protoc_insertion_point(class_scope:airframes.AirframesClientFrame.Source.App)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  int type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_airframes_5fclient_5fframe_2eproto;
};
// -------------------------------------------------------------------

class AirframesClientFrame_Source_Host PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airframes.AirframesClientFrame.Source.Host) */ {
 public:
  inline AirframesClientFrame_Source_Host() : AirframesClientFrame_Source_Host(nullptr) {}
  virtual ~AirframesClientFrame_Source_Host();

  AirframesClientFrame_Source_Host(const AirframesClientFrame_Source_Host& from);
  AirframesClientFrame_Source_Host(AirframesClientFrame_Source_Host&& from) noexcept
    : AirframesClientFrame_Source_Host() {
    *this = ::std::move(from);
  }

  inline AirframesClientFrame_Source_Host& operator=(const AirframesClientFrame_Source_Host& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirframesClientFrame_Source_Host& operator=(AirframesClientFrame_Source_Host&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirframesClientFrame_Source_Host& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AirframesClientFrame_Source_Host* internal_default_instance() {
    return reinterpret_cast<const AirframesClientFrame_Source_Host*>(
               &_AirframesClientFrame_Source_Host_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AirframesClientFrame_Source_Host& a, AirframesClientFrame_Source_Host& b) {
    a.Swap(&b);
  }
  inline void Swap(AirframesClientFrame_Source_Host* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirframesClientFrame_Source_Host* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirframesClientFrame_Source_Host* New() const final {
    return CreateMaybeMessage<AirframesClientFrame_Source_Host>(nullptr);
  }

  AirframesClientFrame_Source_Host* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirframesClientFrame_Source_Host>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirframesClientFrame_Source_Host& from);
  void MergeFrom(const AirframesClientFrame_Source_Host& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirframesClientFrame_Source_Host* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airframes.AirframesClientFrame.Source.Host";
  }
  protected:
  explicit AirframesClientFrame_Source_Host(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_airframes_5fclient_5fframe_2eproto);
    return ::descriptor_table_airframes_5fclient_5fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AirframesClientFrame_Source_Host_Platform Platform;
  static constexpr Platform UNKNOWN_PLATFORM =
    AirframesClientFrame_Source_Host_Platform_UNKNOWN_PLATFORM;
  static constexpr Platform X86_32 =
    AirframesClientFrame_Source_Host_Platform_X86_32;
  static constexpr Platform X86_64 =
    AirframesClientFrame_Source_Host_Platform_X86_64;
  static constexpr Platform ARM_V6 =
    AirframesClientFrame_Source_Host_Platform_ARM_V6;
  static constexpr Platform ARM_V7 =
    AirframesClientFrame_Source_Host_Platform_ARM_V7;
  static constexpr Platform ARM_64 =
    AirframesClientFrame_Source_Host_Platform_ARM_64;
  static inline bool Platform_IsValid(int value) {
    return AirframesClientFrame_Source_Host_Platform_IsValid(value);
  }
  static constexpr Platform Platform_MIN =
    AirframesClientFrame_Source_Host_Platform_Platform_MIN;
  static constexpr Platform Platform_MAX =
    AirframesClientFrame_Source_Host_Platform_Platform_MAX;
  static constexpr int Platform_ARRAYSIZE =
    AirframesClientFrame_Source_Host_Platform_Platform_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Platform_descriptor() {
    return AirframesClientFrame_Source_Host_Platform_descriptor();
  }
  template<typename T>
  static inline const std::string& Platform_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Platform>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Platform_Name.");
    return AirframesClientFrame_Source_Host_Platform_Name(enum_t_value);
  }
  static inline bool Platform_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      Platform* value) {
    return AirframesClientFrame_Source_Host_Platform_Parse(name, value);
  }

  typedef AirframesClientFrame_Source_Host_OperatingSystem OperatingSystem;
  static constexpr OperatingSystem UNKNOWN_OPERATING_SYSTEM =
    AirframesClientFrame_Source_Host_OperatingSystem_UNKNOWN_OPERATING_SYSTEM;
  static constexpr OperatingSystem LINUX =
    AirframesClientFrame_Source_Host_OperatingSystem_LINUX;
  static constexpr OperatingSystem MACOS =
    AirframesClientFrame_Source_Host_OperatingSystem_MACOS;
  static constexpr OperatingSystem WINDOWS =
    AirframesClientFrame_Source_Host_OperatingSystem_WINDOWS;
  static inline bool OperatingSystem_IsValid(int value) {
    return AirframesClientFrame_Source_Host_OperatingSystem_IsValid(value);
  }
  static constexpr OperatingSystem OperatingSystem_MIN =
    AirframesClientFrame_Source_Host_OperatingSystem_OperatingSystem_MIN;
  static constexpr OperatingSystem OperatingSystem_MAX =
    AirframesClientFrame_Source_Host_OperatingSystem_OperatingSystem_MAX;
  static constexpr int OperatingSystem_ARRAYSIZE =
    AirframesClientFrame_Source_Host_OperatingSystem_OperatingSystem_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  OperatingSystem_descriptor() {
    return AirframesClientFrame_Source_Host_OperatingSystem_descriptor();
  }
  template<typename T>
  static inline const std::string& OperatingSystem_Name(T enum_t_value) {
    static_assert(::std::is_same<T, OperatingSystem>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function OperatingSystem_Name.");
    return AirframesClientFrame_Source_Host_OperatingSystem_Name(enum_t_value);
  }
  static inline bool OperatingSystem_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      OperatingSystem* value) {
    return AirframesClientFrame_Source_Host_OperatingSystem_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kVersionFieldNumber = 3,
    kNodeNameFieldNumber = 4,
    kNodeIpFieldNumber = 5,
    kPlatformFieldNumber = 1,
    kOsFieldNumber = 2,
  };
  // string version = 3;
  void clear_version();
  const std::string& version() const;
  void set_version(const std::string& value);
  void set_version(std::string&& value);
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  std::string* mutable_version();
  std::string* release_version();
  void set_allocated_version(std::string* version);
  private:
  const std::string& _internal_version() const;
  void _internal_set_version(const std::string& value);
  std::string* _internal_mutable_version();
  public:

  // string node_name = 4;
  void clear_node_name();
  const std::string& node_name() const;
  void set_node_name(const std::string& value);
  void set_node_name(std::string&& value);
  void set_node_name(const char* value);
  void set_node_name(const char* value, size_t size);
  std::string* mutable_node_name();
  std::string* release_node_name();
  void set_allocated_node_name(std::string* node_name);
  private:
  const std::string& _internal_node_name() const;
  void _internal_set_node_name(const std::string& value);
  std::string* _internal_mutable_node_name();
  public:

  // string node_ip = 5;
  void clear_node_ip();
  const std::string& node_ip() const;
  void set_node_ip(const std::string& value);
  void set_node_ip(std::string&& value);
  void set_node_ip(const char* value);
  void set_node_ip(const char* value, size_t size);
  std::string* mutable_node_ip();
  std::string* release_node_ip();
  void set_allocated_node_ip(std::string* node_ip);
  private:
  const std::string& _internal_node_ip() const;
  void _internal_set_node_ip(const std::string& value);
  std::string* _internal_mutable_node_ip();
  public:

  // .airframes.AirframesClientFrame.Source.Host.Platform platform = 1;
  void clear_platform();
  ::airframes::AirframesClientFrame_Source_Host_Platform platform() const;
  void set_platform(::airframes::AirframesClientFrame_Source_Host_Platform value);
  private:
  ::airframes::AirframesClientFrame_Source_Host_Platform _internal_platform() const;
  void _internal_set_platform(::airframes::AirframesClientFrame_Source_Host_Platform value);
  public:

  // .airframes.AirframesClientFrame.Source.Host.OperatingSystem os = 2;
  void clear_os();
  ::airframes::AirframesClientFrame_Source_Host_OperatingSystem os() const;
  void set_os(::airframes::AirframesClientFrame_Source_Host_OperatingSystem value);
  private:
  ::airframes::AirframesClientFrame_Source_Host_OperatingSystem _internal_os() const;
  void _internal_set_os(::airframes::AirframesClientFrame_Source_Host_OperatingSystem value);
  public:

  // @@protoc_insertion_point(class_scope:airframes.AirframesClientFrame.Source.Host)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr version_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_ip_;
  int platform_;
  int os_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_airframes_5fclient_5fframe_2eproto;
};
// -------------------------------------------------------------------

class AirframesClientFrame_Source PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airframes.AirframesClientFrame.Source) */ {
 public:
  inline AirframesClientFrame_Source() : AirframesClientFrame_Source(nullptr) {}
  virtual ~AirframesClientFrame_Source();

  AirframesClientFrame_Source(const AirframesClientFrame_Source& from);
  AirframesClientFrame_Source(AirframesClientFrame_Source&& from) noexcept
    : AirframesClientFrame_Source() {
    *this = ::std::move(from);
  }

  inline AirframesClientFrame_Source& operator=(const AirframesClientFrame_Source& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirframesClientFrame_Source& operator=(AirframesClientFrame_Source&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirframesClientFrame_Source& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AirframesClientFrame_Source* internal_default_instance() {
    return reinterpret_cast<const AirframesClientFrame_Source*>(
               &_AirframesClientFrame_Source_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AirframesClientFrame_Source& a, AirframesClientFrame_Source& b) {
    a.Swap(&b);
  }
  inline void Swap(AirframesClientFrame_Source* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirframesClientFrame_Source* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirframesClientFrame_Source* New() const final {
    return CreateMaybeMessage<AirframesClientFrame_Source>(nullptr);
  }

  AirframesClientFrame_Source* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirframesClientFrame_Source>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirframesClientFrame_Source& from);
  void MergeFrom(const AirframesClientFrame_Source& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirframesClientFrame_Source* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airframes.AirframesClientFrame.Source";
  }
  protected:
  explicit AirframesClientFrame_Source(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_airframes_5fclient_5fframe_2eproto);
    return ::descriptor_table_airframes_5fclient_5fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AirframesClientFrame_Source_App App;
  typedef AirframesClientFrame_Source_Host Host;

  typedef AirframesClientFrame_Source_SourceType SourceType;
  static constexpr SourceType ACARS =
    AirframesClientFrame_Source_SourceType_ACARS;
  static constexpr SourceType VDL =
    AirframesClientFrame_Source_SourceType_VDL;
  static constexpr SourceType HFDL =
    AirframesClientFrame_Source_SourceType_HFDL;
  static constexpr SourceType AERO =
    AirframesClientFrame_Source_SourceType_AERO;
  static inline bool SourceType_IsValid(int value) {
    return AirframesClientFrame_Source_SourceType_IsValid(value);
  }
  static constexpr SourceType SourceType_MIN =
    AirframesClientFrame_Source_SourceType_SourceType_MIN;
  static constexpr SourceType SourceType_MAX =
    AirframesClientFrame_Source_SourceType_SourceType_MAX;
  static constexpr int SourceType_ARRAYSIZE =
    AirframesClientFrame_Source_SourceType_SourceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SourceType_descriptor() {
    return AirframesClientFrame_Source_SourceType_descriptor();
  }
  template<typename T>
  static inline const std::string& SourceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SourceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SourceType_Name.");
    return AirframesClientFrame_Source_SourceType_Name(enum_t_value);
  }
  static inline bool SourceType_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SourceType* value) {
    return AirframesClientFrame_Source_SourceType_Parse(name, value);
  }

  typedef AirframesClientFrame_Source_SourceFormat SourceFormat;
  static constexpr SourceFormat HUMAN_READABLE_TEXT =
    AirframesClientFrame_Source_SourceFormat_HUMAN_READABLE_TEXT;
  static constexpr SourceFormat BEAST =
    AirframesClientFrame_Source_SourceFormat_BEAST;
  static constexpr SourceFormat SBS3 =
    AirframesClientFrame_Source_SourceFormat_SBS3;
  static constexpr SourceFormat PLANE_PLOTTER =
    AirframesClientFrame_Source_SourceFormat_PLANE_PLOTTER;
  static constexpr SourceFormat JSON_GENERIC =
    AirframesClientFrame_Source_SourceFormat_JSON_GENERIC;
  static constexpr SourceFormat JSON_ACARSDEC =
    AirframesClientFrame_Source_SourceFormat_JSON_ACARSDEC;
  static constexpr SourceFormat JSON_VDLM2DEC =
    AirframesClientFrame_Source_SourceFormat_JSON_VDLM2DEC;
  static inline bool SourceFormat_IsValid(int value) {
    return AirframesClientFrame_Source_SourceFormat_IsValid(value);
  }
  static constexpr SourceFormat SourceFormat_MIN =
    AirframesClientFrame_Source_SourceFormat_SourceFormat_MIN;
  static constexpr SourceFormat SourceFormat_MAX =
    AirframesClientFrame_Source_SourceFormat_SourceFormat_MAX;
  static constexpr int SourceFormat_ARRAYSIZE =
    AirframesClientFrame_Source_SourceFormat_SourceFormat_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  SourceFormat_descriptor() {
    return AirframesClientFrame_Source_SourceFormat_descriptor();
  }
  template<typename T>
  static inline const std::string& SourceFormat_Name(T enum_t_value) {
    static_assert(::std::is_same<T, SourceFormat>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function SourceFormat_Name.");
    return AirframesClientFrame_Source_SourceFormat_Name(enum_t_value);
  }
  static inline bool SourceFormat_Parse(::PROTOBUF_NAMESPACE_ID::ConstStringParam name,
      SourceFormat* value) {
    return AirframesClientFrame_Source_SourceFormat_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAppFieldNumber = 1,
    kHostFieldNumber = 2,
    kTypeFieldNumber = 3,
    kFormatFieldNumber = 4,
  };
  // .airframes.AirframesClientFrame.Source.App app = 1;
  bool has_app() const;
  private:
  bool _internal_has_app() const;
  public:
  void clear_app();
  const ::airframes::AirframesClientFrame_Source_App& app() const;
  ::airframes::AirframesClientFrame_Source_App* release_app();
  ::airframes::AirframesClientFrame_Source_App* mutable_app();
  void set_allocated_app(::airframes::AirframesClientFrame_Source_App* app);
  private:
  const ::airframes::AirframesClientFrame_Source_App& _internal_app() const;
  ::airframes::AirframesClientFrame_Source_App* _internal_mutable_app();
  public:
  void unsafe_arena_set_allocated_app(
      ::airframes::AirframesClientFrame_Source_App* app);
  ::airframes::AirframesClientFrame_Source_App* unsafe_arena_release_app();

  // .airframes.AirframesClientFrame.Source.Host host = 2;
  bool has_host() const;
  private:
  bool _internal_has_host() const;
  public:
  void clear_host();
  const ::airframes::AirframesClientFrame_Source_Host& host() const;
  ::airframes::AirframesClientFrame_Source_Host* release_host();
  ::airframes::AirframesClientFrame_Source_Host* mutable_host();
  void set_allocated_host(::airframes::AirframesClientFrame_Source_Host* host);
  private:
  const ::airframes::AirframesClientFrame_Source_Host& _internal_host() const;
  ::airframes::AirframesClientFrame_Source_Host* _internal_mutable_host();
  public:
  void unsafe_arena_set_allocated_host(
      ::airframes::AirframesClientFrame_Source_Host* host);
  ::airframes::AirframesClientFrame_Source_Host* unsafe_arena_release_host();

  // .airframes.AirframesClientFrame.Source.SourceType type = 3;
  void clear_type();
  ::airframes::AirframesClientFrame_Source_SourceType type() const;
  void set_type(::airframes::AirframesClientFrame_Source_SourceType value);
  private:
  ::airframes::AirframesClientFrame_Source_SourceType _internal_type() const;
  void _internal_set_type(::airframes::AirframesClientFrame_Source_SourceType value);
  public:

  // .airframes.AirframesClientFrame.Source.SourceFormat format = 4;
  void clear_format();
  ::airframes::AirframesClientFrame_Source_SourceFormat format() const;
  void set_format(::airframes::AirframesClientFrame_Source_SourceFormat value);
  private:
  ::airframes::AirframesClientFrame_Source_SourceFormat _internal_format() const;
  void _internal_set_format(::airframes::AirframesClientFrame_Source_SourceFormat value);
  public:

  // @@protoc_insertion_point(class_scope:airframes.AirframesClientFrame.Source)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::airframes::AirframesClientFrame_Source_App* app_;
  ::airframes::AirframesClientFrame_Source_Host* host_;
  int type_;
  int format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_airframes_5fclient_5fframe_2eproto;
};
// -------------------------------------------------------------------

class AirframesClientFrame_AirframesConfig_Feed PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airframes.AirframesClientFrame.AirframesConfig.Feed) */ {
 public:
  inline AirframesClientFrame_AirframesConfig_Feed() : AirframesClientFrame_AirframesConfig_Feed(nullptr) {}
  virtual ~AirframesClientFrame_AirframesConfig_Feed();

  AirframesClientFrame_AirframesConfig_Feed(const AirframesClientFrame_AirframesConfig_Feed& from);
  AirframesClientFrame_AirframesConfig_Feed(AirframesClientFrame_AirframesConfig_Feed&& from) noexcept
    : AirframesClientFrame_AirframesConfig_Feed() {
    *this = ::std::move(from);
  }

  inline AirframesClientFrame_AirframesConfig_Feed& operator=(const AirframesClientFrame_AirframesConfig_Feed& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirframesClientFrame_AirframesConfig_Feed& operator=(AirframesClientFrame_AirframesConfig_Feed&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirframesClientFrame_AirframesConfig_Feed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AirframesClientFrame_AirframesConfig_Feed* internal_default_instance() {
    return reinterpret_cast<const AirframesClientFrame_AirframesConfig_Feed*>(
               &_AirframesClientFrame_AirframesConfig_Feed_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(AirframesClientFrame_AirframesConfig_Feed& a, AirframesClientFrame_AirframesConfig_Feed& b) {
    a.Swap(&b);
  }
  inline void Swap(AirframesClientFrame_AirframesConfig_Feed* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirframesClientFrame_AirframesConfig_Feed* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirframesClientFrame_AirframesConfig_Feed* New() const final {
    return CreateMaybeMessage<AirframesClientFrame_AirframesConfig_Feed>(nullptr);
  }

  AirframesClientFrame_AirframesConfig_Feed* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirframesClientFrame_AirframesConfig_Feed>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirframesClientFrame_AirframesConfig_Feed& from);
  void MergeFrom(const AirframesClientFrame_AirframesConfig_Feed& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirframesClientFrame_AirframesConfig_Feed* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airframes.AirframesClientFrame.AirframesConfig.Feed";
  }
  protected:
  explicit AirframesClientFrame_AirframesConfig_Feed(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_airframes_5fclient_5fframe_2eproto);
    return ::descriptor_table_airframes_5fclient_5fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // @@protoc_insertion_point(class_scope:airframes.AirframesClientFrame.AirframesConfig.Feed)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_airframes_5fclient_5fframe_2eproto;
};
// -------------------------------------------------------------------

class AirframesClientFrame_AirframesConfig PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airframes.AirframesClientFrame.AirframesConfig) */ {
 public:
  inline AirframesClientFrame_AirframesConfig() : AirframesClientFrame_AirframesConfig(nullptr) {}
  virtual ~AirframesClientFrame_AirframesConfig();

  AirframesClientFrame_AirframesConfig(const AirframesClientFrame_AirframesConfig& from);
  AirframesClientFrame_AirframesConfig(AirframesClientFrame_AirframesConfig&& from) noexcept
    : AirframesClientFrame_AirframesConfig() {
    *this = ::std::move(from);
  }

  inline AirframesClientFrame_AirframesConfig& operator=(const AirframesClientFrame_AirframesConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirframesClientFrame_AirframesConfig& operator=(AirframesClientFrame_AirframesConfig&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirframesClientFrame_AirframesConfig& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AirframesClientFrame_AirframesConfig* internal_default_instance() {
    return reinterpret_cast<const AirframesClientFrame_AirframesConfig*>(
               &_AirframesClientFrame_AirframesConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(AirframesClientFrame_AirframesConfig& a, AirframesClientFrame_AirframesConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(AirframesClientFrame_AirframesConfig* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirframesClientFrame_AirframesConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirframesClientFrame_AirframesConfig* New() const final {
    return CreateMaybeMessage<AirframesClientFrame_AirframesConfig>(nullptr);
  }

  AirframesClientFrame_AirframesConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirframesClientFrame_AirframesConfig>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirframesClientFrame_AirframesConfig& from);
  void MergeFrom(const AirframesClientFrame_AirframesConfig& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirframesClientFrame_AirframesConfig* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airframes.AirframesClientFrame.AirframesConfig";
  }
  protected:
  explicit AirframesClientFrame_AirframesConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_airframes_5fclient_5fframe_2eproto);
    return ::descriptor_table_airframes_5fclient_5fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AirframesClientFrame_AirframesConfig_Feed Feed;

  // accessors -------------------------------------------------------

  enum : int {
    kFeedFieldNumber = 1,
  };
  // .airframes.AirframesClientFrame.AirframesConfig.Feed feed = 1;
  bool has_feed() const;
  private:
  bool _internal_has_feed() const;
  public:
  void clear_feed();
  const ::airframes::AirframesClientFrame_AirframesConfig_Feed& feed() const;
  ::airframes::AirframesClientFrame_AirframesConfig_Feed* release_feed();
  ::airframes::AirframesClientFrame_AirframesConfig_Feed* mutable_feed();
  void set_allocated_feed(::airframes::AirframesClientFrame_AirframesConfig_Feed* feed);
  private:
  const ::airframes::AirframesClientFrame_AirframesConfig_Feed& _internal_feed() const;
  ::airframes::AirframesClientFrame_AirframesConfig_Feed* _internal_mutable_feed();
  public:
  void unsafe_arena_set_allocated_feed(
      ::airframes::AirframesClientFrame_AirframesConfig_Feed* feed);
  ::airframes::AirframesClientFrame_AirframesConfig_Feed* unsafe_arena_release_feed();

  // @@protoc_insertion_point(class_scope:airframes.AirframesClientFrame.AirframesConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::airframes::AirframesClientFrame_AirframesConfig_Feed* feed_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_airframes_5fclient_5fframe_2eproto;
};
// -------------------------------------------------------------------

class AirframesClientFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:airframes.AirframesClientFrame) */ {
 public:
  inline AirframesClientFrame() : AirframesClientFrame(nullptr) {}
  virtual ~AirframesClientFrame();

  AirframesClientFrame(const AirframesClientFrame& from);
  AirframesClientFrame(AirframesClientFrame&& from) noexcept
    : AirframesClientFrame() {
    *this = ::std::move(from);
  }

  inline AirframesClientFrame& operator=(const AirframesClientFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline AirframesClientFrame& operator=(AirframesClientFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AirframesClientFrame& default_instance();

  enum MessageCase {
    kAcarsdecMessage = 3,
    kVdlm2DecMessage = 4,
    MESSAGE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AirframesClientFrame* internal_default_instance() {
    return reinterpret_cast<const AirframesClientFrame*>(
               &_AirframesClientFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(AirframesClientFrame& a, AirframesClientFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(AirframesClientFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AirframesClientFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AirframesClientFrame* New() const final {
    return CreateMaybeMessage<AirframesClientFrame>(nullptr);
  }

  AirframesClientFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AirframesClientFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AirframesClientFrame& from);
  void MergeFrom(const AirframesClientFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AirframesClientFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "airframes.AirframesClientFrame";
  }
  protected:
  explicit AirframesClientFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_airframes_5fclient_5fframe_2eproto);
    return ::descriptor_table_airframes_5fclient_5fframe_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef AirframesClientFrame_Source Source;
  typedef AirframesClientFrame_AirframesConfig AirframesConfig;

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kAirframesFieldNumber = 2,
    kAcarsdecMessageFieldNumber = 3,
    kVdlm2DecMessageFieldNumber = 4,
  };
  // .airframes.AirframesClientFrame.Source source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::airframes::AirframesClientFrame_Source& source() const;
  ::airframes::AirframesClientFrame_Source* release_source();
  ::airframes::AirframesClientFrame_Source* mutable_source();
  void set_allocated_source(::airframes::AirframesClientFrame_Source* source);
  private:
  const ::airframes::AirframesClientFrame_Source& _internal_source() const;
  ::airframes::AirframesClientFrame_Source* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::airframes::AirframesClientFrame_Source* source);
  ::airframes::AirframesClientFrame_Source* unsafe_arena_release_source();

  // .airframes.AirframesClientFrame.AirframesConfig airframes = 2;
  bool has_airframes() const;
  private:
  bool _internal_has_airframes() const;
  public:
  void clear_airframes();
  const ::airframes::AirframesClientFrame_AirframesConfig& airframes() const;
  ::airframes::AirframesClientFrame_AirframesConfig* release_airframes();
  ::airframes::AirframesClientFrame_AirframesConfig* mutable_airframes();
  void set_allocated_airframes(::airframes::AirframesClientFrame_AirframesConfig* airframes);
  private:
  const ::airframes::AirframesClientFrame_AirframesConfig& _internal_airframes() const;
  ::airframes::AirframesClientFrame_AirframesConfig* _internal_mutable_airframes();
  public:
  void unsafe_arena_set_allocated_airframes(
      ::airframes::AirframesClientFrame_AirframesConfig* airframes);
  ::airframes::AirframesClientFrame_AirframesConfig* unsafe_arena_release_airframes();

  // .airframes.AcarsdecMessage acarsdec_message = 3;
  bool has_acarsdec_message() const;
  private:
  bool _internal_has_acarsdec_message() const;
  public:
  void clear_acarsdec_message();
  const ::airframes::AcarsdecMessage& acarsdec_message() const;
  ::airframes::AcarsdecMessage* release_acarsdec_message();
  ::airframes::AcarsdecMessage* mutable_acarsdec_message();
  void set_allocated_acarsdec_message(::airframes::AcarsdecMessage* acarsdec_message);
  private:
  const ::airframes::AcarsdecMessage& _internal_acarsdec_message() const;
  ::airframes::AcarsdecMessage* _internal_mutable_acarsdec_message();
  public:
  void unsafe_arena_set_allocated_acarsdec_message(
      ::airframes::AcarsdecMessage* acarsdec_message);
  ::airframes::AcarsdecMessage* unsafe_arena_release_acarsdec_message();

  // .airframes.Vdlm2decMessage vdlm2dec_message = 4;
  bool has_vdlm2dec_message() const;
  private:
  bool _internal_has_vdlm2dec_message() const;
  public:
  void clear_vdlm2dec_message();
  const ::airframes::Vdlm2decMessage& vdlm2dec_message() const;
  ::airframes::Vdlm2decMessage* release_vdlm2dec_message();
  ::airframes::Vdlm2decMessage* mutable_vdlm2dec_message();
  void set_allocated_vdlm2dec_message(::airframes::Vdlm2decMessage* vdlm2dec_message);
  private:
  const ::airframes::Vdlm2decMessage& _internal_vdlm2dec_message() const;
  ::airframes::Vdlm2decMessage* _internal_mutable_vdlm2dec_message();
  public:
  void unsafe_arena_set_allocated_vdlm2dec_message(
      ::airframes::Vdlm2decMessage* vdlm2dec_message);
  ::airframes::Vdlm2decMessage* unsafe_arena_release_vdlm2dec_message();

  void clear_message();
  MessageCase message_case() const;
  // @@protoc_insertion_point(class_scope:airframes.AirframesClientFrame)
 private:
  class _Internal;
  void set_has_acarsdec_message();
  void set_has_vdlm2dec_message();

  inline bool has_message() const;
  inline void clear_has_message();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::airframes::AirframesClientFrame_Source* source_;
  ::airframes::AirframesClientFrame_AirframesConfig* airframes_;
  union MessageUnion {
    MessageUnion() {}
    ::airframes::AcarsdecMessage* acarsdec_message_;
    ::airframes::Vdlm2decMessage* vdlm2dec_message_;
  } message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_airframes_5fclient_5fframe_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// AcarsdecMessage

// double timestamp = 1;
inline void AcarsdecMessage::clear_timestamp() {
  timestamp_ = 0;
}
inline double AcarsdecMessage::_internal_timestamp() const {
  return timestamp_;
}
inline double AcarsdecMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.timestamp)
  return _internal_timestamp();
}
inline void AcarsdecMessage::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void AcarsdecMessage::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.timestamp)
}

// string station_id = 2;
inline void AcarsdecMessage::clear_station_id() {
  station_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcarsdecMessage::station_id() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.station_id)
  return _internal_station_id();
}
inline void AcarsdecMessage::set_station_id(const std::string& value) {
  _internal_set_station_id(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.station_id)
}
inline std::string* AcarsdecMessage::mutable_station_id() {
  // @@protoc_insertion_point(field_mutable:airframes.AcarsdecMessage.station_id)
  return _internal_mutable_station_id();
}
inline const std::string& AcarsdecMessage::_internal_station_id() const {
  return station_id_.Get();
}
inline void AcarsdecMessage::_internal_set_station_id(const std::string& value) {
  
  station_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcarsdecMessage::set_station_id(std::string&& value) {
  
  station_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AcarsdecMessage.station_id)
}
inline void AcarsdecMessage::set_station_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  station_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AcarsdecMessage.station_id)
}
inline void AcarsdecMessage::set_station_id(const char* value,
    size_t size) {
  
  station_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AcarsdecMessage.station_id)
}
inline std::string* AcarsdecMessage::_internal_mutable_station_id() {
  
  return station_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcarsdecMessage::release_station_id() {
  // @@protoc_insertion_point(field_release:airframes.AcarsdecMessage.station_id)
  return station_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcarsdecMessage::set_allocated_station_id(std::string* station_id) {
  if (station_id != nullptr) {
    
  } else {
    
  }
  station_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), station_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AcarsdecMessage.station_id)
}

// uint32 channel = 3;
inline void AcarsdecMessage::clear_channel() {
  channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcarsdecMessage::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcarsdecMessage::channel() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.channel)
  return _internal_channel();
}
inline void AcarsdecMessage::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_ = value;
}
inline void AcarsdecMessage::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.channel)
}

// double frequency = 4;
inline void AcarsdecMessage::clear_frequency() {
  frequency_ = 0;
}
inline double AcarsdecMessage::_internal_frequency() const {
  return frequency_;
}
inline double AcarsdecMessage::frequency() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.frequency)
  return _internal_frequency();
}
inline void AcarsdecMessage::_internal_set_frequency(double value) {
  
  frequency_ = value;
}
inline void AcarsdecMessage::set_frequency(double value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.frequency)
}

// sint32 level = 5;
inline void AcarsdecMessage::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcarsdecMessage::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AcarsdecMessage::level() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.level)
  return _internal_level();
}
inline void AcarsdecMessage::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void AcarsdecMessage::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.level)
}

// uint32 error = 6;
inline void AcarsdecMessage::clear_error() {
  error_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcarsdecMessage::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AcarsdecMessage::error() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.error)
  return _internal_error();
}
inline void AcarsdecMessage::_internal_set_error(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_ = value;
}
inline void AcarsdecMessage::set_error(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.error)
}

// string mode = 7;
inline void AcarsdecMessage::clear_mode() {
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcarsdecMessage::mode() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.mode)
  return _internal_mode();
}
inline void AcarsdecMessage::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.mode)
}
inline std::string* AcarsdecMessage::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:airframes.AcarsdecMessage.mode)
  return _internal_mutable_mode();
}
inline const std::string& AcarsdecMessage::_internal_mode() const {
  return mode_.Get();
}
inline void AcarsdecMessage::_internal_set_mode(const std::string& value) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcarsdecMessage::set_mode(std::string&& value) {
  
  mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AcarsdecMessage.mode)
}
inline void AcarsdecMessage::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AcarsdecMessage.mode)
}
inline void AcarsdecMessage::set_mode(const char* value,
    size_t size) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AcarsdecMessage.mode)
}
inline std::string* AcarsdecMessage::_internal_mutable_mode() {
  
  return mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcarsdecMessage::release_mode() {
  // @@protoc_insertion_point(field_release:airframes.AcarsdecMessage.mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcarsdecMessage::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AcarsdecMessage.mode)
}

// string label = 8;
inline void AcarsdecMessage::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcarsdecMessage::label() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.label)
  return _internal_label();
}
inline void AcarsdecMessage::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.label)
}
inline std::string* AcarsdecMessage::mutable_label() {
  // @@protoc_insertion_point(field_mutable:airframes.AcarsdecMessage.label)
  return _internal_mutable_label();
}
inline const std::string& AcarsdecMessage::_internal_label() const {
  return label_.Get();
}
inline void AcarsdecMessage::_internal_set_label(const std::string& value) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcarsdecMessage::set_label(std::string&& value) {
  
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AcarsdecMessage.label)
}
inline void AcarsdecMessage::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AcarsdecMessage.label)
}
inline void AcarsdecMessage::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AcarsdecMessage.label)
}
inline std::string* AcarsdecMessage::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcarsdecMessage::release_label() {
  // @@protoc_insertion_point(field_release:airframes.AcarsdecMessage.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcarsdecMessage::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AcarsdecMessage.label)
}

// string block_id = 9;
inline void AcarsdecMessage::clear_block_id() {
  block_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcarsdecMessage::block_id() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.block_id)
  return _internal_block_id();
}
inline void AcarsdecMessage::set_block_id(const std::string& value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.block_id)
}
inline std::string* AcarsdecMessage::mutable_block_id() {
  // @@protoc_insertion_point(field_mutable:airframes.AcarsdecMessage.block_id)
  return _internal_mutable_block_id();
}
inline const std::string& AcarsdecMessage::_internal_block_id() const {
  return block_id_.Get();
}
inline void AcarsdecMessage::_internal_set_block_id(const std::string& value) {
  
  block_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcarsdecMessage::set_block_id(std::string&& value) {
  
  block_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AcarsdecMessage.block_id)
}
inline void AcarsdecMessage::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AcarsdecMessage.block_id)
}
inline void AcarsdecMessage::set_block_id(const char* value,
    size_t size) {
  
  block_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AcarsdecMessage.block_id)
}
inline std::string* AcarsdecMessage::_internal_mutable_block_id() {
  
  return block_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcarsdecMessage::release_block_id() {
  // @@protoc_insertion_point(field_release:airframes.AcarsdecMessage.block_id)
  return block_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcarsdecMessage::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AcarsdecMessage.block_id)
}

// string ack = 10;
inline void AcarsdecMessage::clear_ack() {
  ack_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcarsdecMessage::ack() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.ack)
  return _internal_ack();
}
inline void AcarsdecMessage::set_ack(const std::string& value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.ack)
}
inline std::string* AcarsdecMessage::mutable_ack() {
  // @@protoc_insertion_point(field_mutable:airframes.AcarsdecMessage.ack)
  return _internal_mutable_ack();
}
inline const std::string& AcarsdecMessage::_internal_ack() const {
  return ack_.Get();
}
inline void AcarsdecMessage::_internal_set_ack(const std::string& value) {
  
  ack_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcarsdecMessage::set_ack(std::string&& value) {
  
  ack_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AcarsdecMessage.ack)
}
inline void AcarsdecMessage::set_ack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ack_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AcarsdecMessage.ack)
}
inline void AcarsdecMessage::set_ack(const char* value,
    size_t size) {
  
  ack_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AcarsdecMessage.ack)
}
inline std::string* AcarsdecMessage::_internal_mutable_ack() {
  
  return ack_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcarsdecMessage::release_ack() {
  // @@protoc_insertion_point(field_release:airframes.AcarsdecMessage.ack)
  return ack_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcarsdecMessage::set_allocated_ack(std::string* ack) {
  if (ack != nullptr) {
    
  } else {
    
  }
  ack_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ack,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AcarsdecMessage.ack)
}

// string tail = 11;
inline void AcarsdecMessage::clear_tail() {
  tail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcarsdecMessage::tail() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.tail)
  return _internal_tail();
}
inline void AcarsdecMessage::set_tail(const std::string& value) {
  _internal_set_tail(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.tail)
}
inline std::string* AcarsdecMessage::mutable_tail() {
  // @@protoc_insertion_point(field_mutable:airframes.AcarsdecMessage.tail)
  return _internal_mutable_tail();
}
inline const std::string& AcarsdecMessage::_internal_tail() const {
  return tail_.Get();
}
inline void AcarsdecMessage::_internal_set_tail(const std::string& value) {
  
  tail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcarsdecMessage::set_tail(std::string&& value) {
  
  tail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AcarsdecMessage.tail)
}
inline void AcarsdecMessage::set_tail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AcarsdecMessage.tail)
}
inline void AcarsdecMessage::set_tail(const char* value,
    size_t size) {
  
  tail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AcarsdecMessage.tail)
}
inline std::string* AcarsdecMessage::_internal_mutable_tail() {
  
  return tail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcarsdecMessage::release_tail() {
  // @@protoc_insertion_point(field_release:airframes.AcarsdecMessage.tail)
  return tail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcarsdecMessage::set_allocated_tail(std::string* tail) {
  if (tail != nullptr) {
    
  } else {
    
  }
  tail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AcarsdecMessage.tail)
}

// string flight = 12;
inline void AcarsdecMessage::clear_flight() {
  flight_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcarsdecMessage::flight() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.flight)
  return _internal_flight();
}
inline void AcarsdecMessage::set_flight(const std::string& value) {
  _internal_set_flight(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.flight)
}
inline std::string* AcarsdecMessage::mutable_flight() {
  // @@protoc_insertion_point(field_mutable:airframes.AcarsdecMessage.flight)
  return _internal_mutable_flight();
}
inline const std::string& AcarsdecMessage::_internal_flight() const {
  return flight_.Get();
}
inline void AcarsdecMessage::_internal_set_flight(const std::string& value) {
  
  flight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcarsdecMessage::set_flight(std::string&& value) {
  
  flight_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AcarsdecMessage.flight)
}
inline void AcarsdecMessage::set_flight(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AcarsdecMessage.flight)
}
inline void AcarsdecMessage::set_flight(const char* value,
    size_t size) {
  
  flight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AcarsdecMessage.flight)
}
inline std::string* AcarsdecMessage::_internal_mutable_flight() {
  
  return flight_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcarsdecMessage::release_flight() {
  // @@protoc_insertion_point(field_release:airframes.AcarsdecMessage.flight)
  return flight_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcarsdecMessage::set_allocated_flight(std::string* flight) {
  if (flight != nullptr) {
    
  } else {
    
  }
  flight_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flight,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AcarsdecMessage.flight)
}

// string message_number = 13;
inline void AcarsdecMessage::clear_message_number() {
  message_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcarsdecMessage::message_number() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.message_number)
  return _internal_message_number();
}
inline void AcarsdecMessage::set_message_number(const std::string& value) {
  _internal_set_message_number(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.message_number)
}
inline std::string* AcarsdecMessage::mutable_message_number() {
  // @@protoc_insertion_point(field_mutable:airframes.AcarsdecMessage.message_number)
  return _internal_mutable_message_number();
}
inline const std::string& AcarsdecMessage::_internal_message_number() const {
  return message_number_.Get();
}
inline void AcarsdecMessage::_internal_set_message_number(const std::string& value) {
  
  message_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcarsdecMessage::set_message_number(std::string&& value) {
  
  message_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AcarsdecMessage.message_number)
}
inline void AcarsdecMessage::set_message_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AcarsdecMessage.message_number)
}
inline void AcarsdecMessage::set_message_number(const char* value,
    size_t size) {
  
  message_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AcarsdecMessage.message_number)
}
inline std::string* AcarsdecMessage::_internal_mutable_message_number() {
  
  return message_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcarsdecMessage::release_message_number() {
  // @@protoc_insertion_point(field_release:airframes.AcarsdecMessage.message_number)
  return message_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcarsdecMessage::set_allocated_message_number(std::string* message_number) {
  if (message_number != nullptr) {
    
  } else {
    
  }
  message_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AcarsdecMessage.message_number)
}

// string text = 14;
inline void AcarsdecMessage::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AcarsdecMessage::text() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.text)
  return _internal_text();
}
inline void AcarsdecMessage::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.text)
}
inline std::string* AcarsdecMessage::mutable_text() {
  // @@protoc_insertion_point(field_mutable:airframes.AcarsdecMessage.text)
  return _internal_mutable_text();
}
inline const std::string& AcarsdecMessage::_internal_text() const {
  return text_.Get();
}
inline void AcarsdecMessage::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AcarsdecMessage::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AcarsdecMessage.text)
}
inline void AcarsdecMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AcarsdecMessage.text)
}
inline void AcarsdecMessage::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AcarsdecMessage.text)
}
inline std::string* AcarsdecMessage::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AcarsdecMessage::release_text() {
  // @@protoc_insertion_point(field_release:airframes.AcarsdecMessage.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AcarsdecMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AcarsdecMessage.text)
}

// bool end = 15;
inline void AcarsdecMessage::clear_end() {
  end_ = false;
}
inline bool AcarsdecMessage::_internal_end() const {
  return end_;
}
inline bool AcarsdecMessage::end() const {
  // @@protoc_insertion_point(field_get:airframes.AcarsdecMessage.end)
  return _internal_end();
}
inline void AcarsdecMessage::_internal_set_end(bool value) {
  
  end_ = value;
}
inline void AcarsdecMessage::set_end(bool value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:airframes.AcarsdecMessage.end)
}

// -------------------------------------------------------------------

// Vdlm2decMessage

// double timestamp = 1;
inline void Vdlm2decMessage::clear_timestamp() {
  timestamp_ = 0;
}
inline double Vdlm2decMessage::_internal_timestamp() const {
  return timestamp_;
}
inline double Vdlm2decMessage::timestamp() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.timestamp)
  return _internal_timestamp();
}
inline void Vdlm2decMessage::_internal_set_timestamp(double value) {
  
  timestamp_ = value;
}
inline void Vdlm2decMessage::set_timestamp(double value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.timestamp)
}

// string station_id = 2;
inline void Vdlm2decMessage::clear_station_id() {
  station_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::station_id() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.station_id)
  return _internal_station_id();
}
inline void Vdlm2decMessage::set_station_id(const std::string& value) {
  _internal_set_station_id(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.station_id)
}
inline std::string* Vdlm2decMessage::mutable_station_id() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.station_id)
  return _internal_mutable_station_id();
}
inline const std::string& Vdlm2decMessage::_internal_station_id() const {
  return station_id_.Get();
}
inline void Vdlm2decMessage::_internal_set_station_id(const std::string& value) {
  
  station_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_station_id(std::string&& value) {
  
  station_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.station_id)
}
inline void Vdlm2decMessage::set_station_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  station_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.station_id)
}
inline void Vdlm2decMessage::set_station_id(const char* value,
    size_t size) {
  
  station_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.station_id)
}
inline std::string* Vdlm2decMessage::_internal_mutable_station_id() {
  
  return station_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_station_id() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.station_id)
  return station_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_station_id(std::string* station_id) {
  if (station_id != nullptr) {
    
  } else {
    
  }
  station_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), station_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.station_id)
}

// uint32 channel = 3;
inline void Vdlm2decMessage::clear_channel() {
  channel_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vdlm2decMessage::_internal_channel() const {
  return channel_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vdlm2decMessage::channel() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.channel)
  return _internal_channel();
}
inline void Vdlm2decMessage::_internal_set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  channel_ = value;
}
inline void Vdlm2decMessage::set_channel(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_channel(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.channel)
}

// double frequency = 4;
inline void Vdlm2decMessage::clear_frequency() {
  frequency_ = 0;
}
inline double Vdlm2decMessage::_internal_frequency() const {
  return frequency_;
}
inline double Vdlm2decMessage::frequency() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.frequency)
  return _internal_frequency();
}
inline void Vdlm2decMessage::_internal_set_frequency(double value) {
  
  frequency_ = value;
}
inline void Vdlm2decMessage::set_frequency(double value) {
  _internal_set_frequency(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.frequency)
}

// uint32 from_icao = 5;
inline void Vdlm2decMessage::clear_from_icao() {
  from_icao_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vdlm2decMessage::_internal_from_icao() const {
  return from_icao_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vdlm2decMessage::from_icao() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.from_icao)
  return _internal_from_icao();
}
inline void Vdlm2decMessage::_internal_set_from_icao(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  from_icao_ = value;
}
inline void Vdlm2decMessage::set_from_icao(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_from_icao(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.from_icao)
}

// uint32 to_icao = 6;
inline void Vdlm2decMessage::clear_to_icao() {
  to_icao_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vdlm2decMessage::_internal_to_icao() const {
  return to_icao_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vdlm2decMessage::to_icao() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.to_icao)
  return _internal_to_icao();
}
inline void Vdlm2decMessage::_internal_set_to_icao(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  to_icao_ = value;
}
inline void Vdlm2decMessage::set_to_icao(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_to_icao(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.to_icao)
}

// sint32 level = 7;
inline void Vdlm2decMessage::clear_level() {
  level_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vdlm2decMessage::_internal_level() const {
  return level_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Vdlm2decMessage::level() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.level)
  return _internal_level();
}
inline void Vdlm2decMessage::_internal_set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  level_ = value;
}
inline void Vdlm2decMessage::set_level(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_level(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.level)
}

// uint32 error = 8;
inline void Vdlm2decMessage::clear_error() {
  error_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vdlm2decMessage::_internal_error() const {
  return error_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 Vdlm2decMessage::error() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.error)
  return _internal_error();
}
inline void Vdlm2decMessage::_internal_set_error(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  error_ = value;
}
inline void Vdlm2decMessage::set_error(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_error(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.error)
}

// string mode = 9;
inline void Vdlm2decMessage::clear_mode() {
  mode_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::mode() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.mode)
  return _internal_mode();
}
inline void Vdlm2decMessage::set_mode(const std::string& value) {
  _internal_set_mode(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.mode)
}
inline std::string* Vdlm2decMessage::mutable_mode() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.mode)
  return _internal_mutable_mode();
}
inline const std::string& Vdlm2decMessage::_internal_mode() const {
  return mode_.Get();
}
inline void Vdlm2decMessage::_internal_set_mode(const std::string& value) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_mode(std::string&& value) {
  
  mode_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.mode)
}
inline void Vdlm2decMessage::set_mode(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.mode)
}
inline void Vdlm2decMessage::set_mode(const char* value,
    size_t size) {
  
  mode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.mode)
}
inline std::string* Vdlm2decMessage::_internal_mutable_mode() {
  
  return mode_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_mode() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.mode)
  return mode_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_mode(std::string* mode) {
  if (mode != nullptr) {
    
  } else {
    
  }
  mode_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), mode,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.mode)
}

// string label = 10;
inline void Vdlm2decMessage::clear_label() {
  label_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::label() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.label)
  return _internal_label();
}
inline void Vdlm2decMessage::set_label(const std::string& value) {
  _internal_set_label(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.label)
}
inline std::string* Vdlm2decMessage::mutable_label() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.label)
  return _internal_mutable_label();
}
inline const std::string& Vdlm2decMessage::_internal_label() const {
  return label_.Get();
}
inline void Vdlm2decMessage::_internal_set_label(const std::string& value) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_label(std::string&& value) {
  
  label_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.label)
}
inline void Vdlm2decMessage::set_label(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.label)
}
inline void Vdlm2decMessage::set_label(const char* value,
    size_t size) {
  
  label_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.label)
}
inline std::string* Vdlm2decMessage::_internal_mutable_label() {
  
  return label_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_label() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.label)
  return label_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_label(std::string* label) {
  if (label != nullptr) {
    
  } else {
    
  }
  label_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), label,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.label)
}

// string block_id = 11;
inline void Vdlm2decMessage::clear_block_id() {
  block_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::block_id() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.block_id)
  return _internal_block_id();
}
inline void Vdlm2decMessage::set_block_id(const std::string& value) {
  _internal_set_block_id(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.block_id)
}
inline std::string* Vdlm2decMessage::mutable_block_id() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.block_id)
  return _internal_mutable_block_id();
}
inline const std::string& Vdlm2decMessage::_internal_block_id() const {
  return block_id_.Get();
}
inline void Vdlm2decMessage::_internal_set_block_id(const std::string& value) {
  
  block_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_block_id(std::string&& value) {
  
  block_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.block_id)
}
inline void Vdlm2decMessage::set_block_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  block_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.block_id)
}
inline void Vdlm2decMessage::set_block_id(const char* value,
    size_t size) {
  
  block_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.block_id)
}
inline std::string* Vdlm2decMessage::_internal_mutable_block_id() {
  
  return block_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_block_id() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.block_id)
  return block_id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_block_id(std::string* block_id) {
  if (block_id != nullptr) {
    
  } else {
    
  }
  block_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), block_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.block_id)
}

// string ack = 12;
inline void Vdlm2decMessage::clear_ack() {
  ack_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::ack() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.ack)
  return _internal_ack();
}
inline void Vdlm2decMessage::set_ack(const std::string& value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.ack)
}
inline std::string* Vdlm2decMessage::mutable_ack() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.ack)
  return _internal_mutable_ack();
}
inline const std::string& Vdlm2decMessage::_internal_ack() const {
  return ack_.Get();
}
inline void Vdlm2decMessage::_internal_set_ack(const std::string& value) {
  
  ack_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_ack(std::string&& value) {
  
  ack_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.ack)
}
inline void Vdlm2decMessage::set_ack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ack_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.ack)
}
inline void Vdlm2decMessage::set_ack(const char* value,
    size_t size) {
  
  ack_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.ack)
}
inline std::string* Vdlm2decMessage::_internal_mutable_ack() {
  
  return ack_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_ack() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.ack)
  return ack_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_ack(std::string* ack) {
  if (ack != nullptr) {
    
  } else {
    
  }
  ack_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ack,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.ack)
}

// string tail = 13;
inline void Vdlm2decMessage::clear_tail() {
  tail_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::tail() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.tail)
  return _internal_tail();
}
inline void Vdlm2decMessage::set_tail(const std::string& value) {
  _internal_set_tail(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.tail)
}
inline std::string* Vdlm2decMessage::mutable_tail() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.tail)
  return _internal_mutable_tail();
}
inline const std::string& Vdlm2decMessage::_internal_tail() const {
  return tail_.Get();
}
inline void Vdlm2decMessage::_internal_set_tail(const std::string& value) {
  
  tail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_tail(std::string&& value) {
  
  tail_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.tail)
}
inline void Vdlm2decMessage::set_tail(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  tail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.tail)
}
inline void Vdlm2decMessage::set_tail(const char* value,
    size_t size) {
  
  tail_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.tail)
}
inline std::string* Vdlm2decMessage::_internal_mutable_tail() {
  
  return tail_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_tail() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.tail)
  return tail_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_tail(std::string* tail) {
  if (tail != nullptr) {
    
  } else {
    
  }
  tail_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tail,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.tail)
}

// string flight = 14;
inline void Vdlm2decMessage::clear_flight() {
  flight_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::flight() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.flight)
  return _internal_flight();
}
inline void Vdlm2decMessage::set_flight(const std::string& value) {
  _internal_set_flight(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.flight)
}
inline std::string* Vdlm2decMessage::mutable_flight() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.flight)
  return _internal_mutable_flight();
}
inline const std::string& Vdlm2decMessage::_internal_flight() const {
  return flight_.Get();
}
inline void Vdlm2decMessage::_internal_set_flight(const std::string& value) {
  
  flight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_flight(std::string&& value) {
  
  flight_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.flight)
}
inline void Vdlm2decMessage::set_flight(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  flight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.flight)
}
inline void Vdlm2decMessage::set_flight(const char* value,
    size_t size) {
  
  flight_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.flight)
}
inline std::string* Vdlm2decMessage::_internal_mutable_flight() {
  
  return flight_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_flight() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.flight)
  return flight_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_flight(std::string* flight) {
  if (flight != nullptr) {
    
  } else {
    
  }
  flight_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), flight,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.flight)
}

// string message_number = 15;
inline void Vdlm2decMessage::clear_message_number() {
  message_number_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::message_number() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.message_number)
  return _internal_message_number();
}
inline void Vdlm2decMessage::set_message_number(const std::string& value) {
  _internal_set_message_number(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.message_number)
}
inline std::string* Vdlm2decMessage::mutable_message_number() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.message_number)
  return _internal_mutable_message_number();
}
inline const std::string& Vdlm2decMessage::_internal_message_number() const {
  return message_number_.Get();
}
inline void Vdlm2decMessage::_internal_set_message_number(const std::string& value) {
  
  message_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_message_number(std::string&& value) {
  
  message_number_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.message_number)
}
inline void Vdlm2decMessage::set_message_number(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.message_number)
}
inline void Vdlm2decMessage::set_message_number(const char* value,
    size_t size) {
  
  message_number_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.message_number)
}
inline std::string* Vdlm2decMessage::_internal_mutable_message_number() {
  
  return message_number_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_message_number() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.message_number)
  return message_number_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_message_number(std::string* message_number) {
  if (message_number != nullptr) {
    
  } else {
    
  }
  message_number_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_number,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.message_number)
}

// string text = 16;
inline void Vdlm2decMessage::clear_text() {
  text_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::text() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.text)
  return _internal_text();
}
inline void Vdlm2decMessage::set_text(const std::string& value) {
  _internal_set_text(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.text)
}
inline std::string* Vdlm2decMessage::mutable_text() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.text)
  return _internal_mutable_text();
}
inline const std::string& Vdlm2decMessage::_internal_text() const {
  return text_.Get();
}
inline void Vdlm2decMessage::_internal_set_text(const std::string& value) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_text(std::string&& value) {
  
  text_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.text)
}
inline void Vdlm2decMessage::set_text(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.text)
}
inline void Vdlm2decMessage::set_text(const char* value,
    size_t size) {
  
  text_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.text)
}
inline std::string* Vdlm2decMessage::_internal_mutable_text() {
  
  return text_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_text() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.text)
  return text_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_text(std::string* text) {
  if (text != nullptr) {
    
  } else {
    
  }
  text_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), text,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.text)
}

// bool end = 17;
inline void Vdlm2decMessage::clear_end() {
  end_ = false;
}
inline bool Vdlm2decMessage::_internal_end() const {
  return end_;
}
inline bool Vdlm2decMessage::end() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.end)
  return _internal_end();
}
inline void Vdlm2decMessage::_internal_set_end(bool value) {
  
  end_ = value;
}
inline void Vdlm2decMessage::set_end(bool value) {
  _internal_set_end(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.end)
}

// string departure_airport = 18;
inline void Vdlm2decMessage::clear_departure_airport() {
  departure_airport_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::departure_airport() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.departure_airport)
  return _internal_departure_airport();
}
inline void Vdlm2decMessage::set_departure_airport(const std::string& value) {
  _internal_set_departure_airport(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.departure_airport)
}
inline std::string* Vdlm2decMessage::mutable_departure_airport() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.departure_airport)
  return _internal_mutable_departure_airport();
}
inline const std::string& Vdlm2decMessage::_internal_departure_airport() const {
  return departure_airport_.Get();
}
inline void Vdlm2decMessage::_internal_set_departure_airport(const std::string& value) {
  
  departure_airport_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_departure_airport(std::string&& value) {
  
  departure_airport_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.departure_airport)
}
inline void Vdlm2decMessage::set_departure_airport(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  departure_airport_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.departure_airport)
}
inline void Vdlm2decMessage::set_departure_airport(const char* value,
    size_t size) {
  
  departure_airport_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.departure_airport)
}
inline std::string* Vdlm2decMessage::_internal_mutable_departure_airport() {
  
  return departure_airport_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_departure_airport() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.departure_airport)
  return departure_airport_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_departure_airport(std::string* departure_airport) {
  if (departure_airport != nullptr) {
    
  } else {
    
  }
  departure_airport_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), departure_airport,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.departure_airport)
}

// string destination_airport = 19;
inline void Vdlm2decMessage::clear_destination_airport() {
  destination_airport_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::destination_airport() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.destination_airport)
  return _internal_destination_airport();
}
inline void Vdlm2decMessage::set_destination_airport(const std::string& value) {
  _internal_set_destination_airport(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.destination_airport)
}
inline std::string* Vdlm2decMessage::mutable_destination_airport() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.destination_airport)
  return _internal_mutable_destination_airport();
}
inline const std::string& Vdlm2decMessage::_internal_destination_airport() const {
  return destination_airport_.Get();
}
inline void Vdlm2decMessage::_internal_set_destination_airport(const std::string& value) {
  
  destination_airport_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_destination_airport(std::string&& value) {
  
  destination_airport_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.destination_airport)
}
inline void Vdlm2decMessage::set_destination_airport(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  destination_airport_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.destination_airport)
}
inline void Vdlm2decMessage::set_destination_airport(const char* value,
    size_t size) {
  
  destination_airport_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.destination_airport)
}
inline std::string* Vdlm2decMessage::_internal_mutable_destination_airport() {
  
  return destination_airport_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_destination_airport() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.destination_airport)
  return destination_airport_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_destination_airport(std::string* destination_airport) {
  if (destination_airport != nullptr) {
    
  } else {
    
  }
  destination_airport_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), destination_airport,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.destination_airport)
}

// string arrival_eta = 20;
inline void Vdlm2decMessage::clear_arrival_eta() {
  arrival_eta_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::arrival_eta() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.arrival_eta)
  return _internal_arrival_eta();
}
inline void Vdlm2decMessage::set_arrival_eta(const std::string& value) {
  _internal_set_arrival_eta(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.arrival_eta)
}
inline std::string* Vdlm2decMessage::mutable_arrival_eta() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.arrival_eta)
  return _internal_mutable_arrival_eta();
}
inline const std::string& Vdlm2decMessage::_internal_arrival_eta() const {
  return arrival_eta_.Get();
}
inline void Vdlm2decMessage::_internal_set_arrival_eta(const std::string& value) {
  
  arrival_eta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_arrival_eta(std::string&& value) {
  
  arrival_eta_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.arrival_eta)
}
inline void Vdlm2decMessage::set_arrival_eta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  arrival_eta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.arrival_eta)
}
inline void Vdlm2decMessage::set_arrival_eta(const char* value,
    size_t size) {
  
  arrival_eta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.arrival_eta)
}
inline std::string* Vdlm2decMessage::_internal_mutable_arrival_eta() {
  
  return arrival_eta_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_arrival_eta() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.arrival_eta)
  return arrival_eta_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_arrival_eta(std::string* arrival_eta) {
  if (arrival_eta != nullptr) {
    
  } else {
    
  }
  arrival_eta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), arrival_eta,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.arrival_eta)
}

// string gate_out = 21;
inline void Vdlm2decMessage::clear_gate_out() {
  gate_out_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::gate_out() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.gate_out)
  return _internal_gate_out();
}
inline void Vdlm2decMessage::set_gate_out(const std::string& value) {
  _internal_set_gate_out(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.gate_out)
}
inline std::string* Vdlm2decMessage::mutable_gate_out() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.gate_out)
  return _internal_mutable_gate_out();
}
inline const std::string& Vdlm2decMessage::_internal_gate_out() const {
  return gate_out_.Get();
}
inline void Vdlm2decMessage::_internal_set_gate_out(const std::string& value) {
  
  gate_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_gate_out(std::string&& value) {
  
  gate_out_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.gate_out)
}
inline void Vdlm2decMessage::set_gate_out(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gate_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.gate_out)
}
inline void Vdlm2decMessage::set_gate_out(const char* value,
    size_t size) {
  
  gate_out_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.gate_out)
}
inline std::string* Vdlm2decMessage::_internal_mutable_gate_out() {
  
  return gate_out_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_gate_out() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.gate_out)
  return gate_out_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_gate_out(std::string* gate_out) {
  if (gate_out != nullptr) {
    
  } else {
    
  }
  gate_out_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gate_out,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.gate_out)
}

// string ground_off = 22;
inline void Vdlm2decMessage::clear_ground_off() {
  ground_off_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::ground_off() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.ground_off)
  return _internal_ground_off();
}
inline void Vdlm2decMessage::set_ground_off(const std::string& value) {
  _internal_set_ground_off(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.ground_off)
}
inline std::string* Vdlm2decMessage::mutable_ground_off() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.ground_off)
  return _internal_mutable_ground_off();
}
inline const std::string& Vdlm2decMessage::_internal_ground_off() const {
  return ground_off_.Get();
}
inline void Vdlm2decMessage::_internal_set_ground_off(const std::string& value) {
  
  ground_off_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_ground_off(std::string&& value) {
  
  ground_off_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.ground_off)
}
inline void Vdlm2decMessage::set_ground_off(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ground_off_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.ground_off)
}
inline void Vdlm2decMessage::set_ground_off(const char* value,
    size_t size) {
  
  ground_off_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.ground_off)
}
inline std::string* Vdlm2decMessage::_internal_mutable_ground_off() {
  
  return ground_off_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_ground_off() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.ground_off)
  return ground_off_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_ground_off(std::string* ground_off) {
  if (ground_off != nullptr) {
    
  } else {
    
  }
  ground_off_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ground_off,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.ground_off)
}

// string ground_on = 23;
inline void Vdlm2decMessage::clear_ground_on() {
  ground_on_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::ground_on() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.ground_on)
  return _internal_ground_on();
}
inline void Vdlm2decMessage::set_ground_on(const std::string& value) {
  _internal_set_ground_on(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.ground_on)
}
inline std::string* Vdlm2decMessage::mutable_ground_on() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.ground_on)
  return _internal_mutable_ground_on();
}
inline const std::string& Vdlm2decMessage::_internal_ground_on() const {
  return ground_on_.Get();
}
inline void Vdlm2decMessage::_internal_set_ground_on(const std::string& value) {
  
  ground_on_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_ground_on(std::string&& value) {
  
  ground_on_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.ground_on)
}
inline void Vdlm2decMessage::set_ground_on(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ground_on_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.ground_on)
}
inline void Vdlm2decMessage::set_ground_on(const char* value,
    size_t size) {
  
  ground_on_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.ground_on)
}
inline std::string* Vdlm2decMessage::_internal_mutable_ground_on() {
  
  return ground_on_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_ground_on() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.ground_on)
  return ground_on_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_ground_on(std::string* ground_on) {
  if (ground_on != nullptr) {
    
  } else {
    
  }
  ground_on_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ground_on,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.ground_on)
}

// string gate_in = 24;
inline void Vdlm2decMessage::clear_gate_in() {
  gate_in_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Vdlm2decMessage::gate_in() const {
  // @@protoc_insertion_point(field_get:airframes.Vdlm2decMessage.gate_in)
  return _internal_gate_in();
}
inline void Vdlm2decMessage::set_gate_in(const std::string& value) {
  _internal_set_gate_in(value);
  // @@protoc_insertion_point(field_set:airframes.Vdlm2decMessage.gate_in)
}
inline std::string* Vdlm2decMessage::mutable_gate_in() {
  // @@protoc_insertion_point(field_mutable:airframes.Vdlm2decMessage.gate_in)
  return _internal_mutable_gate_in();
}
inline const std::string& Vdlm2decMessage::_internal_gate_in() const {
  return gate_in_.Get();
}
inline void Vdlm2decMessage::_internal_set_gate_in(const std::string& value) {
  
  gate_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Vdlm2decMessage::set_gate_in(std::string&& value) {
  
  gate_in_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.Vdlm2decMessage.gate_in)
}
inline void Vdlm2decMessage::set_gate_in(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  gate_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.Vdlm2decMessage.gate_in)
}
inline void Vdlm2decMessage::set_gate_in(const char* value,
    size_t size) {
  
  gate_in_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.Vdlm2decMessage.gate_in)
}
inline std::string* Vdlm2decMessage::_internal_mutable_gate_in() {
  
  return gate_in_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Vdlm2decMessage::release_gate_in() {
  // @@protoc_insertion_point(field_release:airframes.Vdlm2decMessage.gate_in)
  return gate_in_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Vdlm2decMessage::set_allocated_gate_in(std::string* gate_in) {
  if (gate_in != nullptr) {
    
  } else {
    
  }
  gate_in_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), gate_in,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.Vdlm2decMessage.gate_in)
}

// -------------------------------------------------------------------

// TestRequest

// -------------------------------------------------------------------

// FrameRequest

// -------------------------------------------------------------------

// AirframesClientFrame_Source_App

// .airframes.AirframesClientFrame.Source.App.AppType type = 1;
inline void AirframesClientFrame_Source_App::clear_type() {
  type_ = 0;
}
inline ::airframes::AirframesClientFrame_Source_App_AppType AirframesClientFrame_Source_App::_internal_type() const {
  return static_cast< ::airframes::AirframesClientFrame_Source_App_AppType >(type_);
}
inline ::airframes::AirframesClientFrame_Source_App_AppType AirframesClientFrame_Source_App::type() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.Source.App.type)
  return _internal_type();
}
inline void AirframesClientFrame_Source_App::_internal_set_type(::airframes::AirframesClientFrame_Source_App_AppType value) {
  
  type_ = value;
}
inline void AirframesClientFrame_Source_App::set_type(::airframes::AirframesClientFrame_Source_App_AppType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:airframes.AirframesClientFrame.Source.App.type)
}

// string version = 2;
inline void AirframesClientFrame_Source_App::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AirframesClientFrame_Source_App::version() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.Source.App.version)
  return _internal_version();
}
inline void AirframesClientFrame_Source_App::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:airframes.AirframesClientFrame.Source.App.version)
}
inline std::string* AirframesClientFrame_Source_App::mutable_version() {
  // @@protoc_insertion_point(field_mutable:airframes.AirframesClientFrame.Source.App.version)
  return _internal_mutable_version();
}
inline const std::string& AirframesClientFrame_Source_App::_internal_version() const {
  return version_.Get();
}
inline void AirframesClientFrame_Source_App::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AirframesClientFrame_Source_App::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AirframesClientFrame.Source.App.version)
}
inline void AirframesClientFrame_Source_App::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AirframesClientFrame.Source.App.version)
}
inline void AirframesClientFrame_Source_App::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AirframesClientFrame.Source.App.version)
}
inline std::string* AirframesClientFrame_Source_App::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AirframesClientFrame_Source_App::release_version() {
  // @@protoc_insertion_point(field_release:airframes.AirframesClientFrame.Source.App.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AirframesClientFrame_Source_App::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AirframesClientFrame.Source.App.version)
}

// -------------------------------------------------------------------

// AirframesClientFrame_Source_Host

// .airframes.AirframesClientFrame.Source.Host.Platform platform = 1;
inline void AirframesClientFrame_Source_Host::clear_platform() {
  platform_ = 0;
}
inline ::airframes::AirframesClientFrame_Source_Host_Platform AirframesClientFrame_Source_Host::_internal_platform() const {
  return static_cast< ::airframes::AirframesClientFrame_Source_Host_Platform >(platform_);
}
inline ::airframes::AirframesClientFrame_Source_Host_Platform AirframesClientFrame_Source_Host::platform() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.Source.Host.platform)
  return _internal_platform();
}
inline void AirframesClientFrame_Source_Host::_internal_set_platform(::airframes::AirframesClientFrame_Source_Host_Platform value) {
  
  platform_ = value;
}
inline void AirframesClientFrame_Source_Host::set_platform(::airframes::AirframesClientFrame_Source_Host_Platform value) {
  _internal_set_platform(value);
  // @@protoc_insertion_point(field_set:airframes.AirframesClientFrame.Source.Host.platform)
}

// .airframes.AirframesClientFrame.Source.Host.OperatingSystem os = 2;
inline void AirframesClientFrame_Source_Host::clear_os() {
  os_ = 0;
}
inline ::airframes::AirframesClientFrame_Source_Host_OperatingSystem AirframesClientFrame_Source_Host::_internal_os() const {
  return static_cast< ::airframes::AirframesClientFrame_Source_Host_OperatingSystem >(os_);
}
inline ::airframes::AirframesClientFrame_Source_Host_OperatingSystem AirframesClientFrame_Source_Host::os() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.Source.Host.os)
  return _internal_os();
}
inline void AirframesClientFrame_Source_Host::_internal_set_os(::airframes::AirframesClientFrame_Source_Host_OperatingSystem value) {
  
  os_ = value;
}
inline void AirframesClientFrame_Source_Host::set_os(::airframes::AirframesClientFrame_Source_Host_OperatingSystem value) {
  _internal_set_os(value);
  // @@protoc_insertion_point(field_set:airframes.AirframesClientFrame.Source.Host.os)
}

// string version = 3;
inline void AirframesClientFrame_Source_Host::clear_version() {
  version_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AirframesClientFrame_Source_Host::version() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.Source.Host.version)
  return _internal_version();
}
inline void AirframesClientFrame_Source_Host::set_version(const std::string& value) {
  _internal_set_version(value);
  // @@protoc_insertion_point(field_set:airframes.AirframesClientFrame.Source.Host.version)
}
inline std::string* AirframesClientFrame_Source_Host::mutable_version() {
  // @@protoc_insertion_point(field_mutable:airframes.AirframesClientFrame.Source.Host.version)
  return _internal_mutable_version();
}
inline const std::string& AirframesClientFrame_Source_Host::_internal_version() const {
  return version_.Get();
}
inline void AirframesClientFrame_Source_Host::_internal_set_version(const std::string& value) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AirframesClientFrame_Source_Host::set_version(std::string&& value) {
  
  version_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AirframesClientFrame.Source.Host.version)
}
inline void AirframesClientFrame_Source_Host::set_version(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AirframesClientFrame.Source.Host.version)
}
inline void AirframesClientFrame_Source_Host::set_version(const char* value,
    size_t size) {
  
  version_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AirframesClientFrame.Source.Host.version)
}
inline std::string* AirframesClientFrame_Source_Host::_internal_mutable_version() {
  
  return version_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AirframesClientFrame_Source_Host::release_version() {
  // @@protoc_insertion_point(field_release:airframes.AirframesClientFrame.Source.Host.version)
  return version_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AirframesClientFrame_Source_Host::set_allocated_version(std::string* version) {
  if (version != nullptr) {
    
  } else {
    
  }
  version_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), version,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AirframesClientFrame.Source.Host.version)
}

// string node_name = 4;
inline void AirframesClientFrame_Source_Host::clear_node_name() {
  node_name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AirframesClientFrame_Source_Host::node_name() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.Source.Host.node_name)
  return _internal_node_name();
}
inline void AirframesClientFrame_Source_Host::set_node_name(const std::string& value) {
  _internal_set_node_name(value);
  // @@protoc_insertion_point(field_set:airframes.AirframesClientFrame.Source.Host.node_name)
}
inline std::string* AirframesClientFrame_Source_Host::mutable_node_name() {
  // @@protoc_insertion_point(field_mutable:airframes.AirframesClientFrame.Source.Host.node_name)
  return _internal_mutable_node_name();
}
inline const std::string& AirframesClientFrame_Source_Host::_internal_node_name() const {
  return node_name_.Get();
}
inline void AirframesClientFrame_Source_Host::_internal_set_node_name(const std::string& value) {
  
  node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AirframesClientFrame_Source_Host::set_node_name(std::string&& value) {
  
  node_name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AirframesClientFrame.Source.Host.node_name)
}
inline void AirframesClientFrame_Source_Host::set_node_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AirframesClientFrame.Source.Host.node_name)
}
inline void AirframesClientFrame_Source_Host::set_node_name(const char* value,
    size_t size) {
  
  node_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AirframesClientFrame.Source.Host.node_name)
}
inline std::string* AirframesClientFrame_Source_Host::_internal_mutable_node_name() {
  
  return node_name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AirframesClientFrame_Source_Host::release_node_name() {
  // @@protoc_insertion_point(field_release:airframes.AirframesClientFrame.Source.Host.node_name)
  return node_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AirframesClientFrame_Source_Host::set_allocated_node_name(std::string* node_name) {
  if (node_name != nullptr) {
    
  } else {
    
  }
  node_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AirframesClientFrame.Source.Host.node_name)
}

// string node_ip = 5;
inline void AirframesClientFrame_Source_Host::clear_node_ip() {
  node_ip_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AirframesClientFrame_Source_Host::node_ip() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.Source.Host.node_ip)
  return _internal_node_ip();
}
inline void AirframesClientFrame_Source_Host::set_node_ip(const std::string& value) {
  _internal_set_node_ip(value);
  // @@protoc_insertion_point(field_set:airframes.AirframesClientFrame.Source.Host.node_ip)
}
inline std::string* AirframesClientFrame_Source_Host::mutable_node_ip() {
  // @@protoc_insertion_point(field_mutable:airframes.AirframesClientFrame.Source.Host.node_ip)
  return _internal_mutable_node_ip();
}
inline const std::string& AirframesClientFrame_Source_Host::_internal_node_ip() const {
  return node_ip_.Get();
}
inline void AirframesClientFrame_Source_Host::_internal_set_node_ip(const std::string& value) {
  
  node_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AirframesClientFrame_Source_Host::set_node_ip(std::string&& value) {
  
  node_ip_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AirframesClientFrame.Source.Host.node_ip)
}
inline void AirframesClientFrame_Source_Host::set_node_ip(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AirframesClientFrame.Source.Host.node_ip)
}
inline void AirframesClientFrame_Source_Host::set_node_ip(const char* value,
    size_t size) {
  
  node_ip_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AirframesClientFrame.Source.Host.node_ip)
}
inline std::string* AirframesClientFrame_Source_Host::_internal_mutable_node_ip() {
  
  return node_ip_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AirframesClientFrame_Source_Host::release_node_ip() {
  // @@protoc_insertion_point(field_release:airframes.AirframesClientFrame.Source.Host.node_ip)
  return node_ip_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AirframesClientFrame_Source_Host::set_allocated_node_ip(std::string* node_ip) {
  if (node_ip != nullptr) {
    
  } else {
    
  }
  node_ip_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_ip,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AirframesClientFrame.Source.Host.node_ip)
}

// -------------------------------------------------------------------

// AirframesClientFrame_Source

// .airframes.AirframesClientFrame.Source.App app = 1;
inline bool AirframesClientFrame_Source::_internal_has_app() const {
  return this != internal_default_instance() && app_ != nullptr;
}
inline bool AirframesClientFrame_Source::has_app() const {
  return _internal_has_app();
}
inline void AirframesClientFrame_Source::clear_app() {
  if (GetArena() == nullptr && app_ != nullptr) {
    delete app_;
  }
  app_ = nullptr;
}
inline const ::airframes::AirframesClientFrame_Source_App& AirframesClientFrame_Source::_internal_app() const {
  const ::airframes::AirframesClientFrame_Source_App* p = app_;
  return p != nullptr ? *p : *reinterpret_cast<const ::airframes::AirframesClientFrame_Source_App*>(
      &::airframes::_AirframesClientFrame_Source_App_default_instance_);
}
inline const ::airframes::AirframesClientFrame_Source_App& AirframesClientFrame_Source::app() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.Source.app)
  return _internal_app();
}
inline void AirframesClientFrame_Source::unsafe_arena_set_allocated_app(
    ::airframes::AirframesClientFrame_Source_App* app) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(app_);
  }
  app_ = app;
  if (app) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:airframes.AirframesClientFrame.Source.app)
}
inline ::airframes::AirframesClientFrame_Source_App* AirframesClientFrame_Source::release_app() {
  
  ::airframes::AirframesClientFrame_Source_App* temp = app_;
  app_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::airframes::AirframesClientFrame_Source_App* AirframesClientFrame_Source::unsafe_arena_release_app() {
  // @@protoc_insertion_point(field_release:airframes.AirframesClientFrame.Source.app)
  
  ::airframes::AirframesClientFrame_Source_App* temp = app_;
  app_ = nullptr;
  return temp;
}
inline ::airframes::AirframesClientFrame_Source_App* AirframesClientFrame_Source::_internal_mutable_app() {
  
  if (app_ == nullptr) {
    auto* p = CreateMaybeMessage<::airframes::AirframesClientFrame_Source_App>(GetArena());
    app_ = p;
  }
  return app_;
}
inline ::airframes::AirframesClientFrame_Source_App* AirframesClientFrame_Source::mutable_app() {
  // @@protoc_insertion_point(field_mutable:airframes.AirframesClientFrame.Source.app)
  return _internal_mutable_app();
}
inline void AirframesClientFrame_Source::set_allocated_app(::airframes::AirframesClientFrame_Source_App* app) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete app_;
  }
  if (app) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(app);
    if (message_arena != submessage_arena) {
      app = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, app, submessage_arena);
    }
    
  } else {
    
  }
  app_ = app;
  // @@protoc_insertion_point(field_set_allocated:airframes.AirframesClientFrame.Source.app)
}

// .airframes.AirframesClientFrame.Source.Host host = 2;
inline bool AirframesClientFrame_Source::_internal_has_host() const {
  return this != internal_default_instance() && host_ != nullptr;
}
inline bool AirframesClientFrame_Source::has_host() const {
  return _internal_has_host();
}
inline void AirframesClientFrame_Source::clear_host() {
  if (GetArena() == nullptr && host_ != nullptr) {
    delete host_;
  }
  host_ = nullptr;
}
inline const ::airframes::AirframesClientFrame_Source_Host& AirframesClientFrame_Source::_internal_host() const {
  const ::airframes::AirframesClientFrame_Source_Host* p = host_;
  return p != nullptr ? *p : *reinterpret_cast<const ::airframes::AirframesClientFrame_Source_Host*>(
      &::airframes::_AirframesClientFrame_Source_Host_default_instance_);
}
inline const ::airframes::AirframesClientFrame_Source_Host& AirframesClientFrame_Source::host() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.Source.host)
  return _internal_host();
}
inline void AirframesClientFrame_Source::unsafe_arena_set_allocated_host(
    ::airframes::AirframesClientFrame_Source_Host* host) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(host_);
  }
  host_ = host;
  if (host) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:airframes.AirframesClientFrame.Source.host)
}
inline ::airframes::AirframesClientFrame_Source_Host* AirframesClientFrame_Source::release_host() {
  
  ::airframes::AirframesClientFrame_Source_Host* temp = host_;
  host_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::airframes::AirframesClientFrame_Source_Host* AirframesClientFrame_Source::unsafe_arena_release_host() {
  // @@protoc_insertion_point(field_release:airframes.AirframesClientFrame.Source.host)
  
  ::airframes::AirframesClientFrame_Source_Host* temp = host_;
  host_ = nullptr;
  return temp;
}
inline ::airframes::AirframesClientFrame_Source_Host* AirframesClientFrame_Source::_internal_mutable_host() {
  
  if (host_ == nullptr) {
    auto* p = CreateMaybeMessage<::airframes::AirframesClientFrame_Source_Host>(GetArena());
    host_ = p;
  }
  return host_;
}
inline ::airframes::AirframesClientFrame_Source_Host* AirframesClientFrame_Source::mutable_host() {
  // @@protoc_insertion_point(field_mutable:airframes.AirframesClientFrame.Source.host)
  return _internal_mutable_host();
}
inline void AirframesClientFrame_Source::set_allocated_host(::airframes::AirframesClientFrame_Source_Host* host) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete host_;
  }
  if (host) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(host);
    if (message_arena != submessage_arena) {
      host = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, host, submessage_arena);
    }
    
  } else {
    
  }
  host_ = host;
  // @@protoc_insertion_point(field_set_allocated:airframes.AirframesClientFrame.Source.host)
}

// .airframes.AirframesClientFrame.Source.SourceType type = 3;
inline void AirframesClientFrame_Source::clear_type() {
  type_ = 0;
}
inline ::airframes::AirframesClientFrame_Source_SourceType AirframesClientFrame_Source::_internal_type() const {
  return static_cast< ::airframes::AirframesClientFrame_Source_SourceType >(type_);
}
inline ::airframes::AirframesClientFrame_Source_SourceType AirframesClientFrame_Source::type() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.Source.type)
  return _internal_type();
}
inline void AirframesClientFrame_Source::_internal_set_type(::airframes::AirframesClientFrame_Source_SourceType value) {
  
  type_ = value;
}
inline void AirframesClientFrame_Source::set_type(::airframes::AirframesClientFrame_Source_SourceType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:airframes.AirframesClientFrame.Source.type)
}

// .airframes.AirframesClientFrame.Source.SourceFormat format = 4;
inline void AirframesClientFrame_Source::clear_format() {
  format_ = 0;
}
inline ::airframes::AirframesClientFrame_Source_SourceFormat AirframesClientFrame_Source::_internal_format() const {
  return static_cast< ::airframes::AirframesClientFrame_Source_SourceFormat >(format_);
}
inline ::airframes::AirframesClientFrame_Source_SourceFormat AirframesClientFrame_Source::format() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.Source.format)
  return _internal_format();
}
inline void AirframesClientFrame_Source::_internal_set_format(::airframes::AirframesClientFrame_Source_SourceFormat value) {
  
  format_ = value;
}
inline void AirframesClientFrame_Source::set_format(::airframes::AirframesClientFrame_Source_SourceFormat value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:airframes.AirframesClientFrame.Source.format)
}

// -------------------------------------------------------------------

// AirframesClientFrame_AirframesConfig_Feed

// string id = 1;
inline void AirframesClientFrame_AirframesConfig_Feed::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& AirframesClientFrame_AirframesConfig_Feed::id() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.AirframesConfig.Feed.id)
  return _internal_id();
}
inline void AirframesClientFrame_AirframesConfig_Feed::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:airframes.AirframesClientFrame.AirframesConfig.Feed.id)
}
inline std::string* AirframesClientFrame_AirframesConfig_Feed::mutable_id() {
  // @@protoc_insertion_point(field_mutable:airframes.AirframesClientFrame.AirframesConfig.Feed.id)
  return _internal_mutable_id();
}
inline const std::string& AirframesClientFrame_AirframesConfig_Feed::_internal_id() const {
  return id_.Get();
}
inline void AirframesClientFrame_AirframesConfig_Feed::_internal_set_id(const std::string& value) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AirframesClientFrame_AirframesConfig_Feed::set_id(std::string&& value) {
  
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:airframes.AirframesClientFrame.AirframesConfig.Feed.id)
}
inline void AirframesClientFrame_AirframesConfig_Feed::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:airframes.AirframesClientFrame.AirframesConfig.Feed.id)
}
inline void AirframesClientFrame_AirframesConfig_Feed::set_id(const char* value,
    size_t size) {
  
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:airframes.AirframesClientFrame.AirframesConfig.Feed.id)
}
inline std::string* AirframesClientFrame_AirframesConfig_Feed::_internal_mutable_id() {
  
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AirframesClientFrame_AirframesConfig_Feed::release_id() {
  // @@protoc_insertion_point(field_release:airframes.AirframesClientFrame.AirframesConfig.Feed.id)
  return id_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AirframesClientFrame_AirframesConfig_Feed::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:airframes.AirframesClientFrame.AirframesConfig.Feed.id)
}

// -------------------------------------------------------------------

// AirframesClientFrame_AirframesConfig

// .airframes.AirframesClientFrame.AirframesConfig.Feed feed = 1;
inline bool AirframesClientFrame_AirframesConfig::_internal_has_feed() const {
  return this != internal_default_instance() && feed_ != nullptr;
}
inline bool AirframesClientFrame_AirframesConfig::has_feed() const {
  return _internal_has_feed();
}
inline void AirframesClientFrame_AirframesConfig::clear_feed() {
  if (GetArena() == nullptr && feed_ != nullptr) {
    delete feed_;
  }
  feed_ = nullptr;
}
inline const ::airframes::AirframesClientFrame_AirframesConfig_Feed& AirframesClientFrame_AirframesConfig::_internal_feed() const {
  const ::airframes::AirframesClientFrame_AirframesConfig_Feed* p = feed_;
  return p != nullptr ? *p : *reinterpret_cast<const ::airframes::AirframesClientFrame_AirframesConfig_Feed*>(
      &::airframes::_AirframesClientFrame_AirframesConfig_Feed_default_instance_);
}
inline const ::airframes::AirframesClientFrame_AirframesConfig_Feed& AirframesClientFrame_AirframesConfig::feed() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.AirframesConfig.feed)
  return _internal_feed();
}
inline void AirframesClientFrame_AirframesConfig::unsafe_arena_set_allocated_feed(
    ::airframes::AirframesClientFrame_AirframesConfig_Feed* feed) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(feed_);
  }
  feed_ = feed;
  if (feed) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:airframes.AirframesClientFrame.AirframesConfig.feed)
}
inline ::airframes::AirframesClientFrame_AirframesConfig_Feed* AirframesClientFrame_AirframesConfig::release_feed() {
  
  ::airframes::AirframesClientFrame_AirframesConfig_Feed* temp = feed_;
  feed_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::airframes::AirframesClientFrame_AirframesConfig_Feed* AirframesClientFrame_AirframesConfig::unsafe_arena_release_feed() {
  // @@protoc_insertion_point(field_release:airframes.AirframesClientFrame.AirframesConfig.feed)
  
  ::airframes::AirframesClientFrame_AirframesConfig_Feed* temp = feed_;
  feed_ = nullptr;
  return temp;
}
inline ::airframes::AirframesClientFrame_AirframesConfig_Feed* AirframesClientFrame_AirframesConfig::_internal_mutable_feed() {
  
  if (feed_ == nullptr) {
    auto* p = CreateMaybeMessage<::airframes::AirframesClientFrame_AirframesConfig_Feed>(GetArena());
    feed_ = p;
  }
  return feed_;
}
inline ::airframes::AirframesClientFrame_AirframesConfig_Feed* AirframesClientFrame_AirframesConfig::mutable_feed() {
  // @@protoc_insertion_point(field_mutable:airframes.AirframesClientFrame.AirframesConfig.feed)
  return _internal_mutable_feed();
}
inline void AirframesClientFrame_AirframesConfig::set_allocated_feed(::airframes::AirframesClientFrame_AirframesConfig_Feed* feed) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete feed_;
  }
  if (feed) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(feed);
    if (message_arena != submessage_arena) {
      feed = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, feed, submessage_arena);
    }
    
  } else {
    
  }
  feed_ = feed;
  // @@protoc_insertion_point(field_set_allocated:airframes.AirframesClientFrame.AirframesConfig.feed)
}

// -------------------------------------------------------------------

// AirframesClientFrame

// .airframes.AirframesClientFrame.Source source = 1;
inline bool AirframesClientFrame::_internal_has_source() const {
  return this != internal_default_instance() && source_ != nullptr;
}
inline bool AirframesClientFrame::has_source() const {
  return _internal_has_source();
}
inline void AirframesClientFrame::clear_source() {
  if (GetArena() == nullptr && source_ != nullptr) {
    delete source_;
  }
  source_ = nullptr;
}
inline const ::airframes::AirframesClientFrame_Source& AirframesClientFrame::_internal_source() const {
  const ::airframes::AirframesClientFrame_Source* p = source_;
  return p != nullptr ? *p : *reinterpret_cast<const ::airframes::AirframesClientFrame_Source*>(
      &::airframes::_AirframesClientFrame_Source_default_instance_);
}
inline const ::airframes::AirframesClientFrame_Source& AirframesClientFrame::source() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.source)
  return _internal_source();
}
inline void AirframesClientFrame::unsafe_arena_set_allocated_source(
    ::airframes::AirframesClientFrame_Source* source) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source_);
  }
  source_ = source;
  if (source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:airframes.AirframesClientFrame.source)
}
inline ::airframes::AirframesClientFrame_Source* AirframesClientFrame::release_source() {
  
  ::airframes::AirframesClientFrame_Source* temp = source_;
  source_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::airframes::AirframesClientFrame_Source* AirframesClientFrame::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:airframes.AirframesClientFrame.source)
  
  ::airframes::AirframesClientFrame_Source* temp = source_;
  source_ = nullptr;
  return temp;
}
inline ::airframes::AirframesClientFrame_Source* AirframesClientFrame::_internal_mutable_source() {
  
  if (source_ == nullptr) {
    auto* p = CreateMaybeMessage<::airframes::AirframesClientFrame_Source>(GetArena());
    source_ = p;
  }
  return source_;
}
inline ::airframes::AirframesClientFrame_Source* AirframesClientFrame::mutable_source() {
  // @@protoc_insertion_point(field_mutable:airframes.AirframesClientFrame.source)
  return _internal_mutable_source();
}
inline void AirframesClientFrame::set_allocated_source(::airframes::AirframesClientFrame_Source* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete source_;
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(source);
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    
  } else {
    
  }
  source_ = source;
  // @@protoc_insertion_point(field_set_allocated:airframes.AirframesClientFrame.source)
}

// .airframes.AirframesClientFrame.AirframesConfig airframes = 2;
inline bool AirframesClientFrame::_internal_has_airframes() const {
  return this != internal_default_instance() && airframes_ != nullptr;
}
inline bool AirframesClientFrame::has_airframes() const {
  return _internal_has_airframes();
}
inline void AirframesClientFrame::clear_airframes() {
  if (GetArena() == nullptr && airframes_ != nullptr) {
    delete airframes_;
  }
  airframes_ = nullptr;
}
inline const ::airframes::AirframesClientFrame_AirframesConfig& AirframesClientFrame::_internal_airframes() const {
  const ::airframes::AirframesClientFrame_AirframesConfig* p = airframes_;
  return p != nullptr ? *p : *reinterpret_cast<const ::airframes::AirframesClientFrame_AirframesConfig*>(
      &::airframes::_AirframesClientFrame_AirframesConfig_default_instance_);
}
inline const ::airframes::AirframesClientFrame_AirframesConfig& AirframesClientFrame::airframes() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.airframes)
  return _internal_airframes();
}
inline void AirframesClientFrame::unsafe_arena_set_allocated_airframes(
    ::airframes::AirframesClientFrame_AirframesConfig* airframes) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(airframes_);
  }
  airframes_ = airframes;
  if (airframes) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:airframes.AirframesClientFrame.airframes)
}
inline ::airframes::AirframesClientFrame_AirframesConfig* AirframesClientFrame::release_airframes() {
  
  ::airframes::AirframesClientFrame_AirframesConfig* temp = airframes_;
  airframes_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::airframes::AirframesClientFrame_AirframesConfig* AirframesClientFrame::unsafe_arena_release_airframes() {
  // @@protoc_insertion_point(field_release:airframes.AirframesClientFrame.airframes)
  
  ::airframes::AirframesClientFrame_AirframesConfig* temp = airframes_;
  airframes_ = nullptr;
  return temp;
}
inline ::airframes::AirframesClientFrame_AirframesConfig* AirframesClientFrame::_internal_mutable_airframes() {
  
  if (airframes_ == nullptr) {
    auto* p = CreateMaybeMessage<::airframes::AirframesClientFrame_AirframesConfig>(GetArena());
    airframes_ = p;
  }
  return airframes_;
}
inline ::airframes::AirframesClientFrame_AirframesConfig* AirframesClientFrame::mutable_airframes() {
  // @@protoc_insertion_point(field_mutable:airframes.AirframesClientFrame.airframes)
  return _internal_mutable_airframes();
}
inline void AirframesClientFrame::set_allocated_airframes(::airframes::AirframesClientFrame_AirframesConfig* airframes) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete airframes_;
  }
  if (airframes) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(airframes);
    if (message_arena != submessage_arena) {
      airframes = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, airframes, submessage_arena);
    }
    
  } else {
    
  }
  airframes_ = airframes;
  // @@protoc_insertion_point(field_set_allocated:airframes.AirframesClientFrame.airframes)
}

// .airframes.AcarsdecMessage acarsdec_message = 3;
inline bool AirframesClientFrame::_internal_has_acarsdec_message() const {
  return message_case() == kAcarsdecMessage;
}
inline bool AirframesClientFrame::has_acarsdec_message() const {
  return _internal_has_acarsdec_message();
}
inline void AirframesClientFrame::set_has_acarsdec_message() {
  _oneof_case_[0] = kAcarsdecMessage;
}
inline void AirframesClientFrame::clear_acarsdec_message() {
  if (_internal_has_acarsdec_message()) {
    if (GetArena() == nullptr) {
      delete message_.acarsdec_message_;
    }
    clear_has_message();
  }
}
inline ::airframes::AcarsdecMessage* AirframesClientFrame::release_acarsdec_message() {
  // @@protoc_insertion_point(field_release:airframes.AirframesClientFrame.acarsdec_message)
  if (_internal_has_acarsdec_message()) {
    clear_has_message();
      ::airframes::AcarsdecMessage* temp = message_.acarsdec_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.acarsdec_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::airframes::AcarsdecMessage& AirframesClientFrame::_internal_acarsdec_message() const {
  return _internal_has_acarsdec_message()
      ? *message_.acarsdec_message_
      : *reinterpret_cast< ::airframes::AcarsdecMessage*>(&::airframes::_AcarsdecMessage_default_instance_);
}
inline const ::airframes::AcarsdecMessage& AirframesClientFrame::acarsdec_message() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.acarsdec_message)
  return _internal_acarsdec_message();
}
inline ::airframes::AcarsdecMessage* AirframesClientFrame::unsafe_arena_release_acarsdec_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:airframes.AirframesClientFrame.acarsdec_message)
  if (_internal_has_acarsdec_message()) {
    clear_has_message();
    ::airframes::AcarsdecMessage* temp = message_.acarsdec_message_;
    message_.acarsdec_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AirframesClientFrame::unsafe_arena_set_allocated_acarsdec_message(::airframes::AcarsdecMessage* acarsdec_message) {
  clear_message();
  if (acarsdec_message) {
    set_has_acarsdec_message();
    message_.acarsdec_message_ = acarsdec_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:airframes.AirframesClientFrame.acarsdec_message)
}
inline ::airframes::AcarsdecMessage* AirframesClientFrame::_internal_mutable_acarsdec_message() {
  if (!_internal_has_acarsdec_message()) {
    clear_message();
    set_has_acarsdec_message();
    message_.acarsdec_message_ = CreateMaybeMessage< ::airframes::AcarsdecMessage >(GetArena());
  }
  return message_.acarsdec_message_;
}
inline ::airframes::AcarsdecMessage* AirframesClientFrame::mutable_acarsdec_message() {
  // @@protoc_insertion_point(field_mutable:airframes.AirframesClientFrame.acarsdec_message)
  return _internal_mutable_acarsdec_message();
}

// .airframes.Vdlm2decMessage vdlm2dec_message = 4;
inline bool AirframesClientFrame::_internal_has_vdlm2dec_message() const {
  return message_case() == kVdlm2DecMessage;
}
inline bool AirframesClientFrame::has_vdlm2dec_message() const {
  return _internal_has_vdlm2dec_message();
}
inline void AirframesClientFrame::set_has_vdlm2dec_message() {
  _oneof_case_[0] = kVdlm2DecMessage;
}
inline void AirframesClientFrame::clear_vdlm2dec_message() {
  if (_internal_has_vdlm2dec_message()) {
    if (GetArena() == nullptr) {
      delete message_.vdlm2dec_message_;
    }
    clear_has_message();
  }
}
inline ::airframes::Vdlm2decMessage* AirframesClientFrame::release_vdlm2dec_message() {
  // @@protoc_insertion_point(field_release:airframes.AirframesClientFrame.vdlm2dec_message)
  if (_internal_has_vdlm2dec_message()) {
    clear_has_message();
      ::airframes::Vdlm2decMessage* temp = message_.vdlm2dec_message_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    message_.vdlm2dec_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::airframes::Vdlm2decMessage& AirframesClientFrame::_internal_vdlm2dec_message() const {
  return _internal_has_vdlm2dec_message()
      ? *message_.vdlm2dec_message_
      : *reinterpret_cast< ::airframes::Vdlm2decMessage*>(&::airframes::_Vdlm2decMessage_default_instance_);
}
inline const ::airframes::Vdlm2decMessage& AirframesClientFrame::vdlm2dec_message() const {
  // @@protoc_insertion_point(field_get:airframes.AirframesClientFrame.vdlm2dec_message)
  return _internal_vdlm2dec_message();
}
inline ::airframes::Vdlm2decMessage* AirframesClientFrame::unsafe_arena_release_vdlm2dec_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:airframes.AirframesClientFrame.vdlm2dec_message)
  if (_internal_has_vdlm2dec_message()) {
    clear_has_message();
    ::airframes::Vdlm2decMessage* temp = message_.vdlm2dec_message_;
    message_.vdlm2dec_message_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void AirframesClientFrame::unsafe_arena_set_allocated_vdlm2dec_message(::airframes::Vdlm2decMessage* vdlm2dec_message) {
  clear_message();
  if (vdlm2dec_message) {
    set_has_vdlm2dec_message();
    message_.vdlm2dec_message_ = vdlm2dec_message;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:airframes.AirframesClientFrame.vdlm2dec_message)
}
inline ::airframes::Vdlm2decMessage* AirframesClientFrame::_internal_mutable_vdlm2dec_message() {
  if (!_internal_has_vdlm2dec_message()) {
    clear_message();
    set_has_vdlm2dec_message();
    message_.vdlm2dec_message_ = CreateMaybeMessage< ::airframes::Vdlm2decMessage >(GetArena());
  }
  return message_.vdlm2dec_message_;
}
inline ::airframes::Vdlm2decMessage* AirframesClientFrame::mutable_vdlm2dec_message() {
  // @@protoc_insertion_point(field_mutable:airframes.AirframesClientFrame.vdlm2dec_message)
  return _internal_mutable_vdlm2dec_message();
}

inline bool AirframesClientFrame::has_message() const {
  return message_case() != MESSAGE_NOT_SET;
}
inline void AirframesClientFrame::clear_has_message() {
  _oneof_case_[0] = MESSAGE_NOT_SET;
}
inline AirframesClientFrame::MessageCase AirframesClientFrame::message_case() const {
  return AirframesClientFrame::MessageCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace airframes

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::airframes::AirframesClientFrame_Source_App_AppType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::airframes::AirframesClientFrame_Source_App_AppType>() {
  return ::airframes::AirframesClientFrame_Source_App_AppType_descriptor();
}
template <> struct is_proto_enum< ::airframes::AirframesClientFrame_Source_Host_Platform> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::airframes::AirframesClientFrame_Source_Host_Platform>() {
  return ::airframes::AirframesClientFrame_Source_Host_Platform_descriptor();
}
template <> struct is_proto_enum< ::airframes::AirframesClientFrame_Source_Host_OperatingSystem> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::airframes::AirframesClientFrame_Source_Host_OperatingSystem>() {
  return ::airframes::AirframesClientFrame_Source_Host_OperatingSystem_descriptor();
}
template <> struct is_proto_enum< ::airframes::AirframesClientFrame_Source_SourceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::airframes::AirframesClientFrame_Source_SourceType>() {
  return ::airframes::AirframesClientFrame_Source_SourceType_descriptor();
}
template <> struct is_proto_enum< ::airframes::AirframesClientFrame_Source_SourceFormat> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::airframes::AirframesClientFrame_Source_SourceFormat>() {
  return ::airframes::AirframesClientFrame_Source_SourceFormat_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_airframes_5fclient_5fframe_2eproto
