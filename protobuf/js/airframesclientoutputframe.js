/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

goog.provide('proto.AirframesClientOutputFrame');
goog.provide('proto.AirframesClientOutputFrame.AirframesConfig');
goog.provide('proto.AirframesClientOutputFrame.AirframesConfig.Feed');
goog.provide('proto.AirframesClientOutputFrame.Source');
goog.provide('proto.AirframesClientOutputFrame.Source.App');
goog.provide('proto.AirframesClientOutputFrame.Source.App.AppType');
goog.provide('proto.AirframesClientOutputFrame.Source.Host');
goog.provide('proto.AirframesClientOutputFrame.Source.Host.OperatingSystem');
goog.provide('proto.AirframesClientOutputFrame.Source.Host.Platform');
goog.provide('proto.AirframesClientOutputFrame.Source.SourceFormat');
goog.provide('proto.AirframesClientOutputFrame.Source.SourceType');

goog.require('jspb.BinaryReader');
goog.require('jspb.BinaryWriter');
goog.require('jspb.Message');

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AirframesClientOutputFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AirframesClientOutputFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AirframesClientOutputFrame.displayName = 'proto.AirframesClientOutputFrame';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AirframesClientOutputFrame.Source = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AirframesClientOutputFrame.Source, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AirframesClientOutputFrame.Source.displayName = 'proto.AirframesClientOutputFrame.Source';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AirframesClientOutputFrame.Source.App = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AirframesClientOutputFrame.Source.App, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AirframesClientOutputFrame.Source.App.displayName = 'proto.AirframesClientOutputFrame.Source.App';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AirframesClientOutputFrame.Source.Host = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AirframesClientOutputFrame.Source.Host, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AirframesClientOutputFrame.Source.Host.displayName = 'proto.AirframesClientOutputFrame.Source.Host';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AirframesClientOutputFrame.AirframesConfig = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AirframesClientOutputFrame.AirframesConfig, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AirframesClientOutputFrame.AirframesConfig.displayName = 'proto.AirframesClientOutputFrame.AirframesConfig';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.AirframesClientOutputFrame.AirframesConfig.Feed = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.AirframesClientOutputFrame.AirframesConfig.Feed, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.AirframesClientOutputFrame.AirframesConfig.Feed.displayName = 'proto.AirframesClientOutputFrame.AirframesConfig.Feed';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AirframesClientOutputFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.AirframesClientOutputFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AirframesClientOutputFrame} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AirframesClientOutputFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    source: (f = msg.getSource()) && proto.AirframesClientOutputFrame.Source.toObject(includeInstance, f),
    airframes: (f = msg.getAirframes()) && proto.AirframesClientOutputFrame.AirframesConfig.toObject(includeInstance, f),
    payload: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AirframesClientOutputFrame}
 */
proto.AirframesClientOutputFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AirframesClientOutputFrame;
  return proto.AirframesClientOutputFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AirframesClientOutputFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AirframesClientOutputFrame}
 */
proto.AirframesClientOutputFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AirframesClientOutputFrame.Source;
      reader.readMessage(value,proto.AirframesClientOutputFrame.Source.deserializeBinaryFromReader);
      msg.setSource(value);
      break;
    case 2:
      var value = new proto.AirframesClientOutputFrame.AirframesConfig;
      reader.readMessage(value,proto.AirframesClientOutputFrame.AirframesConfig.deserializeBinaryFromReader);
      msg.setAirframes(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setPayload(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AirframesClientOutputFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AirframesClientOutputFrame.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AirframesClientOutputFrame} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AirframesClientOutputFrame.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSource();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AirframesClientOutputFrame.Source.serializeBinaryToWriter
    );
  }
  f = message.getAirframes();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.AirframesClientOutputFrame.AirframesConfig.serializeBinaryToWriter
    );
  }
  f = message.getPayload();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AirframesClientOutputFrame.Source.prototype.toObject = function(opt_includeInstance) {
  return proto.AirframesClientOutputFrame.Source.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AirframesClientOutputFrame.Source} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AirframesClientOutputFrame.Source.toObject = function(includeInstance, msg) {
  var f, obj = {
    app: (f = msg.getApp()) && proto.AirframesClientOutputFrame.Source.App.toObject(includeInstance, f),
    host: (f = msg.getHost()) && proto.AirframesClientOutputFrame.Source.Host.toObject(includeInstance, f),
    type: jspb.Message.getFieldWithDefault(msg, 3, 0),
    format: jspb.Message.getFieldWithDefault(msg, 4, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AirframesClientOutputFrame.Source}
 */
proto.AirframesClientOutputFrame.Source.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AirframesClientOutputFrame.Source;
  return proto.AirframesClientOutputFrame.Source.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AirframesClientOutputFrame.Source} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AirframesClientOutputFrame.Source}
 */
proto.AirframesClientOutputFrame.Source.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AirframesClientOutputFrame.Source.App;
      reader.readMessage(value,proto.AirframesClientOutputFrame.Source.App.deserializeBinaryFromReader);
      msg.setApp(value);
      break;
    case 2:
      var value = new proto.AirframesClientOutputFrame.Source.Host;
      reader.readMessage(value,proto.AirframesClientOutputFrame.Source.Host.deserializeBinaryFromReader);
      msg.setHost(value);
      break;
    case 3:
      var value = /** @type {!proto.AirframesClientOutputFrame.Source.SourceType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 4:
      var value = /** @type {!proto.AirframesClientOutputFrame.Source.SourceFormat} */ (reader.readEnum());
      msg.setFormat(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AirframesClientOutputFrame.Source.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AirframesClientOutputFrame.Source.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AirframesClientOutputFrame.Source} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AirframesClientOutputFrame.Source.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getApp();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AirframesClientOutputFrame.Source.App.serializeBinaryToWriter
    );
  }
  f = message.getHost();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.AirframesClientOutputFrame.Source.Host.serializeBinaryToWriter
    );
  }
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      3,
      f
    );
  }
  f = message.getFormat();
  if (f !== 0.0) {
    writer.writeEnum(
      4,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.AirframesClientOutputFrame.Source.SourceType = {
  ACARS: 0,
  VDL: 1,
  HFDL: 2,
  AERO: 3
};

/**
 * @enum {number}
 */
proto.AirframesClientOutputFrame.Source.SourceFormat = {
  HUMAN_READABLE_TEXT: 0,
  BEAST: 1,
  SBS3: 2,
  PLANE_PLOTTER: 3,
  JSON_GENERIC: 4,
  JSON_ACARSDEC: 5,
  JSON_VDLM2DEC: 6
};




if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AirframesClientOutputFrame.Source.App.prototype.toObject = function(opt_includeInstance) {
  return proto.AirframesClientOutputFrame.Source.App.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AirframesClientOutputFrame.Source.App} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AirframesClientOutputFrame.Source.App.toObject = function(includeInstance, msg) {
  var f, obj = {
    type: jspb.Message.getFieldWithDefault(msg, 1, 0),
    version: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AirframesClientOutputFrame.Source.App}
 */
proto.AirframesClientOutputFrame.Source.App.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AirframesClientOutputFrame.Source.App;
  return proto.AirframesClientOutputFrame.Source.App.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AirframesClientOutputFrame.Source.App} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AirframesClientOutputFrame.Source.App}
 */
proto.AirframesClientOutputFrame.Source.App.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.AirframesClientOutputFrame.Source.App.AppType} */ (reader.readEnum());
      msg.setType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AirframesClientOutputFrame.Source.App.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AirframesClientOutputFrame.Source.App.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AirframesClientOutputFrame.Source.App} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AirframesClientOutputFrame.Source.App.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getType();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.AirframesClientOutputFrame.Source.App.AppType = {
  UNKNOWN_APP_TYPE: 0,
  ACARSDEC: 1,
  ACARSDECO2: 2,
  VDLM2DEC: 3,
  DUMPVDL2: 4,
  JAERO: 5,
  PC_HFDL: 6,
  SORCERER: 7
};

/**
 * optional AppType type = 1;
 * @return {!proto.AirframesClientOutputFrame.Source.App.AppType}
 */
proto.AirframesClientOutputFrame.Source.App.prototype.getType = function() {
  return /** @type {!proto.AirframesClientOutputFrame.Source.App.AppType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.AirframesClientOutputFrame.Source.App.AppType} value */
proto.AirframesClientOutputFrame.Source.App.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional string version = 2;
 * @return {string}
 */
proto.AirframesClientOutputFrame.Source.App.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/** @param {string} value */
proto.AirframesClientOutputFrame.Source.App.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AirframesClientOutputFrame.Source.Host.prototype.toObject = function(opt_includeInstance) {
  return proto.AirframesClientOutputFrame.Source.Host.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AirframesClientOutputFrame.Source.Host} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AirframesClientOutputFrame.Source.Host.toObject = function(includeInstance, msg) {
  var f, obj = {
    platform: jspb.Message.getFieldWithDefault(msg, 1, 0),
    os: jspb.Message.getFieldWithDefault(msg, 2, 0),
    version: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AirframesClientOutputFrame.Source.Host}
 */
proto.AirframesClientOutputFrame.Source.Host.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AirframesClientOutputFrame.Source.Host;
  return proto.AirframesClientOutputFrame.Source.Host.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AirframesClientOutputFrame.Source.Host} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AirframesClientOutputFrame.Source.Host}
 */
proto.AirframesClientOutputFrame.Source.Host.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.AirframesClientOutputFrame.Source.Host.Platform} */ (reader.readEnum());
      msg.setPlatform(value);
      break;
    case 2:
      var value = /** @type {!proto.AirframesClientOutputFrame.Source.Host.OperatingSystem} */ (reader.readEnum());
      msg.setOs(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVersion(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AirframesClientOutputFrame.Source.Host.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AirframesClientOutputFrame.Source.Host.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AirframesClientOutputFrame.Source.Host} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AirframesClientOutputFrame.Source.Host.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPlatform();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getOs();
  if (f !== 0.0) {
    writer.writeEnum(
      2,
      f
    );
  }
  f = message.getVersion();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * @enum {number}
 */
proto.AirframesClientOutputFrame.Source.Host.Platform = {
  UNKNOWN_PLATFORM: 0,
  X86_32: 1,
  X86_64: 2,
  ARM_V6: 3,
  ARM_V7: 4,
  ARM_64: 5
};

/**
 * @enum {number}
 */
proto.AirframesClientOutputFrame.Source.Host.OperatingSystem = {
  UNKNOWN_OPERATING_SYSTEM: 0,
  LINUX: 1,
  MACOS: 2,
  WINDOWS: 3
};

/**
 * optional Platform platform = 1;
 * @return {!proto.AirframesClientOutputFrame.Source.Host.Platform}
 */
proto.AirframesClientOutputFrame.Source.Host.prototype.getPlatform = function() {
  return /** @type {!proto.AirframesClientOutputFrame.Source.Host.Platform} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.AirframesClientOutputFrame.Source.Host.Platform} value */
proto.AirframesClientOutputFrame.Source.Host.prototype.setPlatform = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional OperatingSystem os = 2;
 * @return {!proto.AirframesClientOutputFrame.Source.Host.OperatingSystem}
 */
proto.AirframesClientOutputFrame.Source.Host.prototype.getOs = function() {
  return /** @type {!proto.AirframesClientOutputFrame.Source.Host.OperatingSystem} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {!proto.AirframesClientOutputFrame.Source.Host.OperatingSystem} value */
proto.AirframesClientOutputFrame.Source.Host.prototype.setOs = function(value) {
  jspb.Message.setProto3EnumField(this, 2, value);
};


/**
 * optional string version = 3;
 * @return {string}
 */
proto.AirframesClientOutputFrame.Source.Host.prototype.getVersion = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.AirframesClientOutputFrame.Source.Host.prototype.setVersion = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional App app = 1;
 * @return {?proto.AirframesClientOutputFrame.Source.App}
 */
proto.AirframesClientOutputFrame.Source.prototype.getApp = function() {
  return /** @type{?proto.AirframesClientOutputFrame.Source.App} */ (
    jspb.Message.getWrapperField(this, proto.AirframesClientOutputFrame.Source.App, 1));
};


/** @param {?proto.AirframesClientOutputFrame.Source.App|undefined} value */
proto.AirframesClientOutputFrame.Source.prototype.setApp = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.AirframesClientOutputFrame.Source.prototype.clearApp = function() {
  this.setApp(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AirframesClientOutputFrame.Source.prototype.hasApp = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Host host = 2;
 * @return {?proto.AirframesClientOutputFrame.Source.Host}
 */
proto.AirframesClientOutputFrame.Source.prototype.getHost = function() {
  return /** @type{?proto.AirframesClientOutputFrame.Source.Host} */ (
    jspb.Message.getWrapperField(this, proto.AirframesClientOutputFrame.Source.Host, 2));
};


/** @param {?proto.AirframesClientOutputFrame.Source.Host|undefined} value */
proto.AirframesClientOutputFrame.Source.prototype.setHost = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.AirframesClientOutputFrame.Source.prototype.clearHost = function() {
  this.setHost(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AirframesClientOutputFrame.Source.prototype.hasHost = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional SourceType type = 3;
 * @return {!proto.AirframesClientOutputFrame.Source.SourceType}
 */
proto.AirframesClientOutputFrame.Source.prototype.getType = function() {
  return /** @type {!proto.AirframesClientOutputFrame.Source.SourceType} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {!proto.AirframesClientOutputFrame.Source.SourceType} value */
proto.AirframesClientOutputFrame.Source.prototype.setType = function(value) {
  jspb.Message.setProto3EnumField(this, 3, value);
};


/**
 * optional SourceFormat format = 4;
 * @return {!proto.AirframesClientOutputFrame.Source.SourceFormat}
 */
proto.AirframesClientOutputFrame.Source.prototype.getFormat = function() {
  return /** @type {!proto.AirframesClientOutputFrame.Source.SourceFormat} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {!proto.AirframesClientOutputFrame.Source.SourceFormat} value */
proto.AirframesClientOutputFrame.Source.prototype.setFormat = function(value) {
  jspb.Message.setProto3EnumField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AirframesClientOutputFrame.AirframesConfig.prototype.toObject = function(opt_includeInstance) {
  return proto.AirframesClientOutputFrame.AirframesConfig.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AirframesClientOutputFrame.AirframesConfig} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AirframesClientOutputFrame.AirframesConfig.toObject = function(includeInstance, msg) {
  var f, obj = {
    feed: (f = msg.getFeed()) && proto.AirframesClientOutputFrame.AirframesConfig.Feed.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AirframesClientOutputFrame.AirframesConfig}
 */
proto.AirframesClientOutputFrame.AirframesConfig.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AirframesClientOutputFrame.AirframesConfig;
  return proto.AirframesClientOutputFrame.AirframesConfig.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AirframesClientOutputFrame.AirframesConfig} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AirframesClientOutputFrame.AirframesConfig}
 */
proto.AirframesClientOutputFrame.AirframesConfig.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.AirframesClientOutputFrame.AirframesConfig.Feed;
      reader.readMessage(value,proto.AirframesClientOutputFrame.AirframesConfig.Feed.deserializeBinaryFromReader);
      msg.setFeed(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AirframesClientOutputFrame.AirframesConfig.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AirframesClientOutputFrame.AirframesConfig.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AirframesClientOutputFrame.AirframesConfig} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AirframesClientOutputFrame.AirframesConfig.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFeed();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.AirframesClientOutputFrame.AirframesConfig.Feed.serializeBinaryToWriter
    );
  }
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.AirframesClientOutputFrame.AirframesConfig.Feed.prototype.toObject = function(opt_includeInstance) {
  return proto.AirframesClientOutputFrame.AirframesConfig.Feed.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.AirframesClientOutputFrame.AirframesConfig.Feed} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AirframesClientOutputFrame.AirframesConfig.Feed.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.AirframesClientOutputFrame.AirframesConfig.Feed}
 */
proto.AirframesClientOutputFrame.AirframesConfig.Feed.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.AirframesClientOutputFrame.AirframesConfig.Feed;
  return proto.AirframesClientOutputFrame.AirframesConfig.Feed.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.AirframesClientOutputFrame.AirframesConfig.Feed} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.AirframesClientOutputFrame.AirframesConfig.Feed}
 */
proto.AirframesClientOutputFrame.AirframesConfig.Feed.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.AirframesClientOutputFrame.AirframesConfig.Feed.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.AirframesClientOutputFrame.AirframesConfig.Feed.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.AirframesClientOutputFrame.AirframesConfig.Feed} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.AirframesClientOutputFrame.AirframesConfig.Feed.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.AirframesClientOutputFrame.AirframesConfig.Feed.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.AirframesClientOutputFrame.AirframesConfig.Feed.prototype.setId = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional Feed feed = 1;
 * @return {?proto.AirframesClientOutputFrame.AirframesConfig.Feed}
 */
proto.AirframesClientOutputFrame.AirframesConfig.prototype.getFeed = function() {
  return /** @type{?proto.AirframesClientOutputFrame.AirframesConfig.Feed} */ (
    jspb.Message.getWrapperField(this, proto.AirframesClientOutputFrame.AirframesConfig.Feed, 1));
};


/** @param {?proto.AirframesClientOutputFrame.AirframesConfig.Feed|undefined} value */
proto.AirframesClientOutputFrame.AirframesConfig.prototype.setFeed = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.AirframesClientOutputFrame.AirframesConfig.prototype.clearFeed = function() {
  this.setFeed(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AirframesClientOutputFrame.AirframesConfig.prototype.hasFeed = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional Source source = 1;
 * @return {?proto.AirframesClientOutputFrame.Source}
 */
proto.AirframesClientOutputFrame.prototype.getSource = function() {
  return /** @type{?proto.AirframesClientOutputFrame.Source} */ (
    jspb.Message.getWrapperField(this, proto.AirframesClientOutputFrame.Source, 1));
};


/** @param {?proto.AirframesClientOutputFrame.Source|undefined} value */
proto.AirframesClientOutputFrame.prototype.setSource = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.AirframesClientOutputFrame.prototype.clearSource = function() {
  this.setSource(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AirframesClientOutputFrame.prototype.hasSource = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional AirframesConfig airframes = 2;
 * @return {?proto.AirframesClientOutputFrame.AirframesConfig}
 */
proto.AirframesClientOutputFrame.prototype.getAirframes = function() {
  return /** @type{?proto.AirframesClientOutputFrame.AirframesConfig} */ (
    jspb.Message.getWrapperField(this, proto.AirframesClientOutputFrame.AirframesConfig, 2));
};


/** @param {?proto.AirframesClientOutputFrame.AirframesConfig|undefined} value */
proto.AirframesClientOutputFrame.prototype.setAirframes = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 */
proto.AirframesClientOutputFrame.prototype.clearAirframes = function() {
  this.setAirframes(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.AirframesClientOutputFrame.prototype.hasAirframes = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional string payload = 3;
 * @return {string}
 */
proto.AirframesClientOutputFrame.prototype.getPayload = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.AirframesClientOutputFrame.prototype.setPayload = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


